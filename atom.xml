<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ningensei848.github.io/</id>
    <title>気合でなんとか</title>
    <updated>2024-01-27T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ningensei848.github.io/"/>
    <subtitle>Kiai (@ningensei848) が日々を生きた証</subtitle>
    <icon>https://ningensei848.github.io/img/favicon.ico</icon>
    <rights>Copyright © ningensei848, 2024</rights>
    <entry>
        <title type="html"><![CDATA[そして、2024年]]></title>
        <id>https://ningensei848.github.io/2024/01/27/</id>
        <link href="https://ningensei848.github.io/2024/01/27/"/>
        <updated>2024-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[随分と時間が空いてしまった。]]></summary>
        <content type="html"><![CDATA[<p>随分と時間が空いてしまった。</p>
<p>一昨年の初冬に４年ぶり二回目の緊急搬送で一命をとりとめ、昨年の初夏あたりに取り敢えず治療が一段落した。
その半年のうち半分以上は入院生活を余儀なくされ、さらにその期間の半分は高熱にうなされロクに生活できたものではなかった。</p>
<p>気づけば一年が過ぎ、その間にかろうじて残されていた糸を手繰り、どうにかこの春から仕事を始める
……というとこれまでニートだったかのようだが、この春からは他所様にも胸を張って紹介できる定職に就く。</p>
<p>2024年に入ってからも色々あったが、ようやく落ち着いた気がするので、整理のためにつらつらと書いてみる
（と言いつつすでに面倒になってきた、心情を吐露すれば全て文字に起こして文章にまとめてくれるAIくんはいつ出るだろうか、もうあるかな）。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="官庁訪問その後">官庁訪問、その後<a href="https://ningensei848.github.io/2024/01/27/#%E5%AE%98%E5%BA%81%E8%A8%AA%E5%95%8F%E3%81%9D%E3%81%AE%E5%BE%8C" class="hash-link" aria-label="Direct link to 官庁訪問、その後" title="Direct link to 官庁訪問、その後">​</a></h2>
<p><a href="https://ningensei848.github.io/2023/07/05">直前の記事</a>でも書いた通り、「官庁訪問」という通過儀礼をどうにか遂行した。
更に前の年で感触が良かったデジタル庁は結局箸にも棒にも掛からず、人手不足と外圧を原因とする圧迫感ある面接でサラッと落とされた。
若手というよりは「わかってない」出向者を引いてしまったと強く感じたのを覚えている。</p>
<p>５日間程度の幅が設けてあったかと思うが、大体の機関は２日間の訪問を要求してくるため、最終的に伺うことができたのはデジタル庁以外に２つだけであった
（デジタル庁が一日目でお祈り、ほかは二日目に進めた）。
志望者のみになって考えてくれるなら、機関Aの待ち時間で別の期間Bとのリモート面談ができて然るべきと考えていたのだが、流石にそこまで柔軟ではなかった。
もっと人手不足にならないとわからないんだろうと思う。
こればかりは仕方がない。</p>
<p>で、片方の機関で自分の行ないを酷く恥じる場面があった。
これは生涯忘れないだろうと思えるほどの窮地に陥ったというか、相手から見た自分をあまりにも軽く見すぎていた。
もちろんお祈りをいただいた。
この経験はのちの人生に大いに活かせると思う。
とても恥ずかしくて誰にも言えるものではないが、次に同じ状況に陥ることはないと断言できる。
面接担当には最大の怒りを感じるとともに、人生を違えなくて住むように導いてくれて深く感謝している。
あなたは究極にクソな態度で俺を馬鹿にしてきたが、そんなおれはあなた以上にクソで同しようもない馬鹿だった、ありがとう。</p>
<p>最終的に、色々検討したうちの<strong>どれでもない</strong>ところにお誘いをいただき、これを承諾して無事に内定となった
（「何事もなかった」というと嘘になるのだが、結果的に内定は得たので奉仕します）。
なにをどうやるのかはまだそこまでわからないが、きっと俺の力は活かせるであろうことは確信できた。
あとはどうにかして組織の力学を理解して動かせるかどうかにかかっている。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="退院してその後">退院して、その後<a href="https://ningensei848.github.io/2024/01/27/#%E9%80%80%E9%99%A2%E3%81%97%E3%81%A6%E3%81%9D%E3%81%AE%E5%BE%8C" class="hash-link" aria-label="Direct link to 退院して、その後" title="Direct link to 退院して、その後">​</a></h2>
<p>腹に空いた孔も塞がりきらないうちに退院し、皮膚が乗り切らないうちに官庁訪問を終えたが、もちろんその裏で病気療養のあれこれも進んでいた。
オペして二ヶ月経ったくらいからステラーラを入れていたが、次の秋頃にはあまり効いていないという経過が現れてきた。
ので、次に検討するのはリンヴォック・レミケード・スキリージなどだったが、これまでの履歴と薬品の実績を考慮してレミケードを使うことになった。
故・安倍晋三氏も利用していたというUC向けの生物学的製剤だが、クローンにも使えるし寛解維持にはこれが一番信頼できるということだった。</p>
<p>で、そこからだいたい半年経たないくらいのいま、やっぱり効きが悪いんじゃね？というフェーズが訪れてしまった。
本当に薬が悪いのか、食生活や服薬が不正なのか、おそらく後者なのだが先生判断でレミケードが倍量（上限）になった。
これで効果がないと未知数のスキリージか、おそらく機序を考えると自分には効きにくいリンヴォックかということになり、結構厳しい状況に陥る。</p>
<p>だいぶ追い込まれた形だが、３月には引っ越して独立生計になる予定なので、そこから食生活をすべて自分の管理下に置くことができる。
ここでうまくコントロールして、自身を持って日々を生活および職務遂行ができるようにしていきたい。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="業務その他">業務、その他<a href="https://ningensei848.github.io/2024/01/27/#%E6%A5%AD%E5%8B%99%E3%81%9D%E3%81%AE%E4%BB%96" class="hash-link" aria-label="Direct link to 業務、その他" title="Direct link to 業務、その他">​</a></h2>
<p>退院して３ヶ月ほど様子を見て、秋からリモート業務に復帰するということになっていた。
宣言通り10月は意欲的に色々取り組んで充実していた気がするが、11月以降の記憶があまりない。</p>
<p>定例ミーティングには参加して発言もしていたが、それ以外のコントリビューションが雀の涙程度しかなかった。
それは GitHub における草の生え方を見てもらえばわかるだろう。
ほぼコミットしていない。
あったとしてもローカルの範疇にとどまる程度だった。
かなしい。
雇用主には頭を下げつつ、あと二ヶ月で馬車馬のごとく（あるいは輝ける貢献を置き土産に）働くしかないだろう。
頑張る。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="自分以外">自分以外<a href="https://ningensei848.github.io/2024/01/27/#%E8%87%AA%E5%88%86%E4%BB%A5%E5%A4%96" class="hash-link" aria-label="Direct link to 自分以外" title="Direct link to 自分以外">​</a></h2>
<p>次男の新築戸建て、祖母の三周忌などが去年までのイベントで比較的平和であった。</p>
<p>新居を20代のうちに建てるのもすごいが、その原資が夫婦それぞれの両親が1/3ずつというのもすごい。
早く定職について孫でも設けてもらわねば、という両家の圧もあるのはキツいだろうが、どうにか跳ね除けて頑張って欲しい。</p>
<p>祖母は知らぬ間にいなくなり、知らぬ間に壺に詰められ、知らぬ間に墓に入っていた。
どうも、過去数年の記憶がだいたい消えている。
帰省の度につくってくれた懐かしのカレーを思い出す。
顔も声も思い出せるが、いつの間にかいなくなっていて実感が薄いのだけが寂しい気持ちでいる。</p>
<p>で、今年に入ってから色々あった。</p>
<ul>
<li>末弟が被災（ごく軽度）</li>
<li>正月に訪れた親類が緊急搬送</li>
<li>祖父、急逝</li>
</ul>
<p>石川に居る弟は地震でかなり揺れたようで、かろうじて家具が倒れる程度の被害で済んだ。
能登半島の根っこ部分あたりにおり、彼自身はなんの支障もないようだ。
学友たちの多くが七尾だの輪島だのということでそちらがてんてこ舞いなのは心配だと云っていた。
それでもときが進んでいくのは酷だなぁと思いつつ、政府施策でGoToなんちゃらを被災地域対象でやる予定があるらしいことを聞いた。
夏前に何処か時間を作って、北陸の味覚を堪能しに旅にでも行こうかとおもう。</p>
<p>親類の緊急搬送は、部位が頭だったことが響いてよくない。
ジジババが一度体調を崩してしまうとあっという間であるのは常だが、幸い今回は帰ってこれた。
こういうことがあると全部リモートでどうにかせいと思ってしまうが、まだそこまで技術が追いついてこないのも確かだ。
来年はどうなるかわからないが、健康に生きつつ安全にも気をつけてほしい。</p>
<p>そうこうしているうちに祖父が急逝した。
これについてとかく言うことはない。
というか文字で残すことはない。
健康だと思って疎んでいたらいきなり死んだ。
実はかなり癌が進行していて、それを伝えると延命措置で入院するとわかっていたからこその態度だったのか。
真相はなにもわからないが、ロクにものも食えない・水も飲めない状態で臓器をやられて死んだ。
最後まで苦しんだ。
戦乱期の飢えや渇きをその身で知る祖父が迎える最期としてはあんまりすぎると思ったが、それは俺が思っただけである。
実際の祖父がどう思っていたのか知るすべはない。</p>
<p>聞いておけばという後悔だけが残っている。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="そし��て">そして、<a href="https://ningensei848.github.io/2024/01/27/#%E3%81%9D%E3%81%97%E3%81%A6" class="hash-link" aria-label="Direct link to そして、" title="Direct link to そして、">​</a></h2>
<p>4月からはそれなりに社会的責任のある職務を遂行していく。
俺にその資格がただしく与えられているのかはともかく、やるべきことをやる。
それはまだはじめは与えられることをこなすだけであろうが、なるべく速やかに昇進して組織に変革をもたらせるようになりたい。
変革とまではいかずとも、価値ある貢献がつくりだせるように精進する。</p>
<p>他方、自分のライフワークとしてプログラミングは続けていく。
フロントエンドをゆるく追いかけるのもいいし、インフラ周りを頑張るのもいいだろう。
副業はもちろん禁止されているが、係累が俺のアドバイスを受けて行なう分にはなんの問題もない。
そういう建付けで価値を得る未来も残されている。</p>
<p>健康第一で過ごしつつ、人生を次のステージへと進めていけるように、日々を足掻いて過ごしたい。</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="日記" term="日記"/>
        <category label="blog" term="blog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[官庁訪問 in 2023]]></title>
        <id>https://ningensei848.github.io/2023/07/05/</id>
        <link href="https://ningensei848.github.io/2023/07/05/"/>
        <updated>2023-07-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[動機：]]></summary>
        <content type="html"><![CDATA[<p><strong>動機</strong>：</p>
<p>色々考えることがありすぎてフリーズしてしまいがちなので、テキストに出力して整理するとともに、手を動かして擬似的にやる気を発生させたい</p>
<p>というわけで現在 2023/07/04 の午後 4 時すぎ、色々考えていきます</p>
<h1>日程とか前提情報</h1>
<p>1 次試験の合格発表は 5 日で、官庁訪問の解禁が 7 日から</p>
<p>しかし、それ以前に予約しないと訪問さえ出来ないというのがルールである（虚しいね）</p>
<p>もちろん人気のあるところはバンバン予約しないと終わる（もう終わってるところもあるかも？）</p>
<p>ので、まずは生きたいところをピックアップして取り敢えずメール入れるのが先決</p>
<ul>
<li><a href="https://www.jinji.go.jp/saiyo/saiyo/ippan/2023ippan_guide.pdf" target="_blank" rel="noopener noreferrer">国家公務員 一般職 官庁訪問（2023） ガイド</a></li>
</ul>
<h1>流れ（おさらい）</h1>
<ol>
<li>業務説明会等による情報収集</li>
<li>採用試験</li>
<li>官庁訪問</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-業務説明会等による情報収集">1. 業務説明会等による情報収集<a href="https://ningensei848.github.io/2023/07/05/#1-%E6%A5%AD%E5%8B%99%E8%AA%AC%E6%98%8E%E4%BC%9A%E7%AD%89%E3%81%AB%E3%82%88%E3%82%8B%E6%83%85%E5%A0%B1%E5%8F%8E%E9%9B%86" class="hash-link" aria-label="Direct link to 1. 業務説明会等による情報収集" title="Direct link to 1. 業務説明会等による情報収集">​</a></h2>
<p>通年でやっているものもあれば、「一次試験合格者対象」みたいなものもある
6 日に開催されるのがそれで、是非をそこには参加すべき</p>
<ul>
<li><a href="https://www.jinji.go.jp/jinji_kanto/saiyou/1_ippandai/exam-explan_2/exam-explan_2.html" target="_blank" rel="noopener noreferrer">https://www.jinji.go.jp/jinji_kanto/saiyou/1_ippandai/exam-explan_2/exam-explan_2.html</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-採用試験">2. 採用試験<a href="https://ningensei848.github.io/2023/07/05/#2-%E6%8E%A1%E7%94%A8%E8%A9%A6%E9%A8%93" class="hash-link" aria-label="Direct link to 2. 採用試験" title="Direct link to 2. 採用試験">​</a></h2>
<ul>
<li>一次：筆記</li>
<li>二次：面接 by 人事院</li>
</ul>
<p>両方パスすると晴れて「人事院名簿」に記載され、年齢制限を超えない範囲で三年間有効（＝官庁訪問できる）となる</p>
<p>例えば学部二年時に名簿に記載された状態で 4 年時に官庁訪問とかもできる（はず、大卒対象であれば卒業自体は必須だろうけど）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-官庁訪問">3. 官庁訪問<a href="https://ningensei848.github.io/2023/07/05/#3-%E5%AE%98%E5%BA%81%E8%A8%AA%E5%95%8F" class="hash-link" aria-label="Direct link to 3. 官庁訪問" title="Direct link to 3. 官庁訪問">​</a></h2>
<p>機会を確保するためオンラインで実施するところが多いが、現地（対面）で実施するところもある？
まだ深く調べていないが、どちらか選べるなら雰囲気を知るためにも現地に行くほうがいいだろう……</p>
<p>基本的に面接カードを書き、複数回以上の小面談を突破すれば最終的に電話がかかってくるようだ（？）　 → 　噂によると一発で取らないとその時点で線が消えるとか……</p>
<p>官庁訪問を実施するためには事前にメールで予約を入れる必要がある
（これは最重要事項なので何度でも繰り返して強調したい）</p>
<p>だから今日中に目処をつけないと本当にまずい……セルフ背水の陣（アホ）</p>
<h1>じゃあ探そう！</h1>
<p>取り敢えず、業務説明会に出てくるような意欲的なところから探すべきだろう
（自分が「東京」の「デジタル・電気・電子」だったので、その条件で弾かれないように）</p>
<p>参加組織の一覧は以下の通り：</p>
<ul>
<li><a href="https://www.jinji.go.jp/jinji_kanto/saiyou/1_ippandai/exam-explan_2/exam-explan_2-2.html" target="_blank" rel="noopener noreferrer">官庁合同業務説明会（技術）</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="候補">候補<a href="https://ningensei848.github.io/2023/07/05/#%E5%80%99%E8%A3%9C" class="hash-link" aria-label="Direct link to 候補" title="Direct link to 候補">​</a></h2>
<ol>
<li>年齢の問題もあるので、年功序列だとキツそう</li>
<li>当然のようにハードな働きと求められると体力がなく死にかける</li>
<li>「次」もあることを想定し、それなりのネームバリュー</li>
</ol>
<p>という条件で探してみる</p>
<p>直感で良さそうと思ったところ：</p>
<ul>
<li>デジタル庁</li>
<li>総務省（技術系（情報通信分野））</li>
<li>関東総合通信局</li>
<li>関東財務局（デジタル・電気・電子）</li>
<li>農林水産省（技術系）</li>
<li>経済産業省</li>
<li>防衛省本省</li>
<li>国立公文書館</li>
</ul>
<p>加えて、現実的に採用人数が狭いところに挑んでもキツイだけなので、そこだけを見て評価してみる：</p>
<p>cf. <a href="https://www.jinji.go.jp/saiyo/saiyo/ippan/G1-2023gijutusaiyoyotei.pdf" target="_blank" rel="noopener noreferrer">採用予定人数 | 採用予定機関一覧</a></p>
<ul>
<li>金融庁 (25)</li>
<li>経済産業省 本省 (30)</li>
<li>防衛省 情報本部 (21)</li>
</ul>
<p>直感で選んだものについて、人数を併記してみる：</p>
<ul>
<li>8 名: デジタル庁</li>
<li>6 名:総務省（技術系（情報通信分野））</li>
<li>12 名:関東総合通信局</li>
<li>1 名: 関東財務局（デジタル・電気・電子）</li>
<li>5 名:農林水産省（技術系）</li>
<li>5 名:防衛省本省</li>
<li>2 名:国立公文書館</li>
</ul>
<p>ンンンンだいぶ狭い門な気がしてくる……</p>
<p>上記にないもので良さそうなもの：</p>
<ul>
<li>厚生労働省 11 名 → なぜか合同説明会には登壇無し、なぜ？</li>
<li>関東管区警察局・東京都警察情報通信部 20 名/14 名</li>
</ul>
<p>採用枠が多い順に検討していこう（業務説明会の前に予約締切になるところもあるので）：</p>
<h1>各省庁の検討</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="経済産業省-本省30">経済産業省 本省(30)<a href="https://ningensei848.github.io/2023/07/05/#%E7%B5%8C%E6%B8%88%E7%94%A3%E6%A5%AD%E7%9C%81-%E6%9C%AC%E7%9C%8130" class="hash-link" aria-label="Direct link to 経済産業省 本省(30)" title="Direct link to 経済産業省 本省(30)">​</a></h2>
<ul>
<li><a href="https://www.meti.go.jp/information/recruit/kanchohomon/06.html" target="_blank" rel="noopener noreferrer">2023 年度版 一般職＜大卒程度・技術系＞官庁訪問 （METI/経済産業省）</a></li>
</ul>
<blockquote>
<p>予約には以下の２ステップが必要になります。</p>
<p>①、② がすべて期日までに行われることにより、官庁訪問の予約が完了することになります。①、② いずれかが締切を過ぎた場合、参加登録は完了されませんのでご注意ください。</p>
<p>＜予約開始日＞<br>
7 月 5 日（水）9 時</p>
<p>＜登録に必要なステップ＞<br>
① 　調査票（後述）を提出フォームにアップロード【訪問希望日の前日 15 時締切】<br>
　　 →<a href="https://mm-enquete-cnt.meti.go.jp/form/pub/honsyo02/chyousahyo" target="_blank" rel="noopener noreferrer">提出フォームはコチラ</a>［提出受付開始：7 月 5 日（水）］<br>
② 　「経済産業省　 MY PAGE（マイページ）」にて訪問希望の日時を予約　【訪問希望日の前日 15 時締切】</p>
</blockquote>
<table><thead><tr><th style="text-align:left">実施日</th><th style="text-align:left">初回訪問</th><th style="text-align:left">実施方法</th></tr></thead><tbody><tr><td style="text-align:left">7 月 7 日（金）</td><td style="text-align:left">〇</td><td style="text-align:left">対面</td></tr><tr><td style="text-align:left">7 月 8 日（土）</td><td style="text-align:left">○</td><td style="text-align:left">対面</td></tr><tr><td style="text-align:left">7 月 9 日（日）</td><td style="text-align:left">〇</td><td style="text-align:left">オンライン</td></tr><tr><td style="text-align:left">7 月 10 日（月）</td><td style="text-align:left">○</td><td style="text-align:left">対面</td></tr><tr><td style="text-align:left">7 月 11 日（火）</td><td style="text-align:left">○</td><td style="text-align:left">対面</td></tr></tbody></table>
<blockquote>
<p><strong>※採用数との兼ね合いから、可能な限り早期に訪問いただくことをお勧めします。</strong></p>
</blockquote>
<p>→ 速いもんがちっぽいな？？？？！！！！</p>
<p>特記事項：</p>
<blockquote>
<p>志望動機（経済産業省で取り組みたいこと）</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="金融庁-25">金融庁 (25)<a href="https://ningensei848.github.io/2023/07/05/#%E9%87%91%E8%9E%8D%E5%BA%81-25" class="hash-link" aria-label="Direct link to 金融庁 (25)" title="Direct link to 金融庁 (25)">​</a></h2>
<p>予約受付期間（短い！！）</p>
<blockquote>
<p>官庁訪問の予約は、メールにて承ります。
予約の際には、下記の事項をご記入いただき、必要書類を添付の上、ご連絡ください。</p>
<p>必要書類の確認ができ次第、順次いただいたメールアドレスに官庁訪問の日程確定のご連絡をいたします。
なお、日程確定後に予約日時の変更やキャンセルが生じた場合には、速やかに下記メールアドレスまでご連絡いただくようお願い申し上げます。</p>
<p>□ 予約受付時間：　７月５日（水）９時 00 分～ 23 時 59 分</p>
</blockquote>
<blockquote>
<p>これまで最も力を入れてきたこと<br>
（内容、力を入れた理由、工夫した点、学んだことに言及してください</p>
</blockquote>
<blockquote>
<p>金融庁の志望理由</p>
</blockquote>
<blockquote>
<p>注目している世の中の動き（金融以外も可</p>
</blockquote>
<blockquote>
<p>ご自身について（自分が思う自分、他人が思う自分）</p>
</blockquote>
<p>これ ↓ がかなりいい気がする（直感）
ウケればワンチャンあるかも</p>
<blockquote>
<p>プログラミングによる業務効率化のアプリ作成などに挑戦する若手の理工系職員を組織として応援するカルチャーも特徴的</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="防衛省-情報本部-21">防衛省 情報本部 (21)<a href="https://ningensei848.github.io/2023/07/05/#%E9%98%B2%E8%A1%9B%E7%9C%81-%E6%83%85%E5%A0%B1%E6%9C%AC%E9%83%A8-21" class="hash-link" aria-label="Direct link to 防衛省 情報本部 (21)" title="Direct link to 防衛省 情報本部 (21)">​</a></h2>
<p>合同説明会にて、情報本部は第 4 回に登壇予定</p>
<p><a href="https://www.mod.go.jp/j/saiyou/ippan_senmon/schedule/is_d_20230616c.html" target="_blank" rel="noopener noreferrer">https://www.mod.go.jp/j/saiyou/ippan_senmon/schedule/is_d_20230616c.html</a></p>
<p>参加には 17 時までの予約が必要</p>
<p>特記事項：</p>
<ul>
<li>志望動機</li>
<li>自己 PR</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="関東管区警察局20">関東管区警察局(20)<a href="https://ningensei848.github.io/2023/07/05/#%E9%96%A2%E6%9D%B1%E7%AE%A1%E5%8C%BA%E8%AD%A6%E5%AF%9F%E5%B1%8020" class="hash-link" aria-label="Direct link to 関東管区警察局(20)" title="Direct link to 関東管区警察局(20)">​</a></h2>
<p>情報通信部と異なり、こっちのウェブページはそこそこきちんとしている</p>
<p><a href="https://www.kanto.npa.go.jp/recruit/" target="_blank" rel="noopener noreferrer">https://www.kanto.npa.go.jp/recruit/</a></p>
<p>第二次の官庁訪問期間があるので、そちらか……？</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="東京都警察情報通信部14">東京都警察情報通信部(14)<a href="https://ningensei848.github.io/2023/07/05/#%E6%9D%B1%E4%BA%AC%E9%83%BD%E8%AD%A6%E5%AF%9F%E6%83%85%E5%A0%B1%E9%80%9A%E4%BF%A1%E9%83%A814" class="hash-link" aria-label="Direct link to 東京都警察情報通信部(14)" title="Direct link to 東京都警察情報通信部(14)">​</a></h2>
<p>ウェブページからしてやばそうな空気は、ある</p>
<p><a href="https://www.npa.go.jp/joutuu/saiyou2/2syugijyutukeisaiyou/totsusaiyoujyouhou.html" target="_blank" rel="noopener noreferrer">https://www.npa.go.jp/joutuu/saiyou2/2syugijyutukeisaiyou/totsusaiyoujyouhou.html</a></p>
<p>第二次の官庁訪問期間があるので、そちらで検討するのもあり（というかそれが濃厚か）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="関東総合通信局12">関東総合通信局(12)<a href="https://ningensei848.github.io/2023/07/05/#%E9%96%A2%E6%9D%B1%E7%B7%8F%E5%90%88%E9%80%9A%E4%BF%A1%E5%B1%8012" class="hash-link" aria-label="Direct link to 関東総合通信局(12)" title="Direct link to 関東総合通信局(12)">​</a></h2>
<p><a href="https://www.soumu.go.jp/soutsu/kanto/saiyou/shinki.html#%E5%AE%98%E5%BA%81%E8%A8%AA%E5%95%8F" target="_blank" rel="noopener noreferrer">https://www.soumu.go.jp/soutsu/kanto/saiyou/shinki.html#官庁訪問</a></p>
<p>正直かなり良さそうだけど、情報が少ない、説明会を見るべきかな…</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="厚生労働省11">厚生労働省(11)<a href="https://ningensei848.github.io/2023/07/05/#%E5%8E%9A%E7%94%9F%E5%8A%B4%E5%83%8D%E7%9C%8111" class="hash-link" aria-label="Direct link to 厚生労働省(11)" title="Direct link to 厚生労働省(11)">​</a></h2>
<p><a href="https://www.mhlw.go.jp/general/saiyo/kokka2/ippanroudou_kanchouhoumon.html" target="_blank" rel="noopener noreferrer">https://www.mhlw.go.jp/general/saiyo/kokka2/ippanroudou_kanchouhoumon.html</a></p>
<p>予約期間：2023 年７月５日（水）９：００ ～ ７月 10 日（月）１６：００</p>
<table><thead><tr><th style="text-align:left">訪問日</th><th style="text-align:left">開始時刻</th><th style="text-align:left">予約締切</th></tr></thead><tbody><tr><td style="text-align:left">７月　７日（金）</td><td style="text-align:left">９：００～</td><td style="text-align:left">７月　６日（木）１６：００</td></tr><tr><td style="text-align:left">７月　８日（土）</td><td style="text-align:left">９：００～</td><td style="text-align:left">７月　７日（金）１６：００</td></tr><tr><td style="text-align:left">　７月９日（日）</td><td style="text-align:left">９：００～</td><td style="text-align:left">７月　８日（土）１６：００</td></tr><tr><td style="text-align:left">　７月１０日（月）</td><td style="text-align:left">９：００～</td><td style="text-align:left">７月９日（日）１６：００</td></tr><tr><td style="text-align:left">　７月１１日（火）</td><td style="text-align:left">９：００～</td><td style="text-align:left">７月１０日（月）１６：００</td></tr></tbody></table>
<p>特記事項</p>
<ul>
<li>今までで達成したことの中で最も大きなこと及び達成するために行ったこと</li>
<li>自分の長所等自覚している性格</li>
<li>厚生労働省（労働行政）を志望する理由</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="デジタル庁8">デジタル庁(8)<a href="https://ningensei848.github.io/2023/07/05/#%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E5%BA%818" class="hash-link" aria-label="Direct link to デジタル庁(8)" title="Direct link to デジタル庁(8)">​</a></h2>
<p><a href="https://www.digital.go.jp/recruitment/newgraduates/2023-governmentofficevisit-clericalposition/" target="_blank" rel="noopener noreferrer">https://www.digital.go.jp/recruitment/newgraduates/2023-governmentofficevisit-clericalposition/</a></p>
<p>予約受付期間</p>
<ul>
<li>7 月 7 日（金）の訪問を希望される場合<!-- -->
<ul>
<li>2023 年 7 月 5 日（水）9 時から 7 月 6 日（木）16 時</li>
</ul>
</li>
<li>7 月 11 日（火）までの訪問を希望される場合<!-- -->
<ul>
<li>2023 年 7 月 5 日（水）9 時から 7 月 7 日（金）16 時</li>
</ul>
</li>
</ul>
<blockquote>
<p>必要事項を記入した「予約様式」及び「訪問カード」を添付の上、下記の連絡先へメールをお送りください。</p>
</blockquote>
<p>正直いっちゃん最初に行って玉砕ルートもあり……と思いつつ、他でカンを取り戻してから挑みたい気持ちもある……</p>
<p>とはいえ 10 日の訪問が一番丸いと思う</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="総務省技術系情報通信分野-6">総務省（技術系（情報通信分野）） (6)<a href="https://ningensei848.github.io/2023/07/05/#%E7%B7%8F%E5%8B%99%E7%9C%81%E6%8A%80%E8%A1%93%E7%B3%BB%E6%83%85%E5%A0%B1%E9%80%9A%E4%BF%A1%E5%88%86%E9%87%8E-6" class="hash-link" aria-label="Direct link to 総務省（技術系（情報通信分野）） (6)" title="Direct link to 総務省（技術系（情報通信分野）） (6)">​</a></h2>
<p><a href="https://www.soumu.go.jp/menu_syokai/saiyou/i2syu_visit_2019.html" target="_blank" rel="noopener noreferrer">https://www.soumu.go.jp/menu_syokai/saiyou/i2syu_visit_2019.html</a></p>
<blockquote>
<p>2022 年 7 月 7 日（金）～<br>
※　 7 月 12 日（水）～ 7 月 31 日（月）は第 2 次試験実施期間等のため官庁訪問は行いません。<br>
※　 8 月 1 日以降、引き続き訪問を受け付けます。<br>
※　採用人数に達し次第募集を締め切ります。<br></p>
</blockquote>
<p>ここでも速いもんがちっぽい、優先度高め</p>
<p>特記事項</p>
<ul>
<li>総務省 志望理由・総務省で取り組みたいこと</li>
<li>学生時代に力を注いだこと</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="文部科学省6">文部科学省(6)<a href="https://ningensei848.github.io/2023/07/05/#%E6%96%87%E9%83%A8%E7%A7%91%E5%AD%A6%E7%9C%816" class="hash-link" aria-label="Direct link to 文部科学省(6)" title="Direct link to 文部科学省(6)">​</a></h2>
<p><a href="https://www.mext.go.jp/b_menu/saiyou/sougougijyutsu/detail/mext_00008.html" target="_blank" rel="noopener noreferrer">https://www.mext.go.jp/b_menu/saiyou/sougougijyutsu/detail/mext_00008.html</a></p>
<p>なんか Slack 導入したとか言うニュースを見て希望が持てそうと思ったので、ここで差し込む</p>
<blockquote>
<p>【予約締切】<br></p>
<ul>
<li>7 月 7 日（金曜日）に初回訪問を希望する場合：7 月 5 日（水曜日）9 時～ 7 月 6 日（木曜日）17 時<br></li>
<li>7 月 8 日（土曜日）以降に初回訪問を希望する場合：原則として訪問日の前日 17 時まで<br></li>
</ul>
<p>※7 月 8 日（土曜日）以降に初回訪問を希望する場合において、前日までに予約が間に合わなかった場合、予約申し込みの状況によってはご希望の訪問日程に沿えない場合がございますのでご了承ください。<br>
※7 月 9 日（日曜日）は官庁訪問は実施しません。</p>
</blockquote>
<blockquote>
<p><strong>原則、対面にて行います。オンラインを希望する場合には、予約フォームの「留意事項」欄にその旨御記入ください。</strong>
オンラインの場合には、CiscoWebexMeeting を使用します。</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="農林水産省技術系-5">農林水産省（技術系） (5)<a href="https://ningensei848.github.io/2023/07/05/#%E8%BE%B2%E6%9E%97%E6%B0%B4%E7%94%A3%E7%9C%81%E6%8A%80%E8%A1%93%E7%B3%BB-5" class="hash-link" aria-label="Direct link to 農林水産省（技術系） (5)" title="Direct link to 農林水産省（技術系） (5)">​</a></h2>
<p><a href="https://www.maff.go.jp/j/joinus/recruit/2gi_3gi/visit.html" target="_blank" rel="noopener noreferrer">https://www.maff.go.jp/j/joinus/recruit/2gi_3gi/visit.html</a></p>
<p><strong>対面実施！！</strong></p>
<blockquote>
<p>予約方法：ア、イの両方を予約期間の 7 月 5 日（水曜日）9 時～ 7 月 6 日（木曜日）17 時に完了ください。<br>
ア.こちらのフォーム（外部サイト、〆切まで編集可能）にご回答ください。<br>
イ.マイページ登録の上、予約期間中にマイページから下記の身上書（提出物）をご提出ください。</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="防衛省本省-5">防衛省本省 (5)<a href="https://ningensei848.github.io/2023/07/05/#%E9%98%B2%E8%A1%9B%E7%9C%81%E6%9C%AC%E7%9C%81-5" class="hash-link" aria-label="Direct link to 防衛省本省 (5)" title="Direct link to 防衛省本省 (5)">​</a></h2>
<p><a href="https://www.mod.go.jp/j/saiyou/ippan_senmon/kanchohomon/index.html" target="_blank" rel="noopener noreferrer">https://www.mod.go.jp/j/saiyou/ippan_senmon/kanchohomon/index.html</a></p>
<p>専用フォームが 5 日に開くのでそこから申し込みする模様
7/7, 7/8 の二日間しか無いので優先度高め
（初回訪問日を乗り越えると、10 日にも呼ばれる可能性あり）</p>
<p>受付開始：７月　５日（水）９時<br>
締　　切：７月　６日（木）１７時</p>
<p><strong>対面実施！！</strong> ＠市ヶ谷</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="国立公文書館2">国立公文書館(2)<a href="https://ningensei848.github.io/2023/07/05/#%E5%9B%BD%E7%AB%8B%E5%85%AC%E6%96%87%E6%9B%B8%E9%A4%A82" class="hash-link" aria-label="Direct link to 国立公文書館(2)" title="Direct link to 国立公文書館(2)">​</a></h2>
<p>各日 6 名程度しか時間を割けないとのことで、倍率は下がるのか？
でも機会を奪うのは……どうなんだろう？</p>
<p><a href="https://www.archives.go.jp/saiyo/ippan/2023ippan_houmon.html" target="_blank" rel="noopener noreferrer">https://www.archives.go.jp/saiyo/ippan/2023ippan_houmon.html</a></p>
<blockquote>
<p>7 月 5 日（水）午前 9 時から予約受付を開始します。以下の予約受付用のメールアドレス宛に希望する官庁訪問日を予約してください。<br>
・予約定員：各日 6 名程度　<br>
※定員に達し次第、予約は終了させていただきます。</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="関東財務局デジタル電気電子1">関東財務局（デジタル・電気・電子）(1)<a href="https://ningensei848.github.io/2023/07/05/#%E9%96%A2%E6%9D%B1%E8%B2%A1%E5%8B%99%E5%B1%80%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E9%9B%BB%E6%B0%97%E9%9B%BB%E5%AD%901" class="hash-link" aria-label="Direct link to 関東財務局（デジタル・電気・電子）(1)" title="Direct link to 関東財務局（デジタル・電気・電子）(1)">​</a></h2>
<p>考え直したけど、1 名の狭き門に挑むほどの熱量はない</p>
<p><a href="https://lfb.mof.go.jp/kantou/recruit/pagekthp007000071.html" target="_blank" rel="noopener noreferrer">https://lfb.mof.go.jp/kantou/recruit/pagekthp007000071.html</a></p>
<h1>作戦立案</h1>
<p>優先順位（書類を用意する順番）</p>
<ol>
<li>金融庁 → なんかイケそう</li>
<li>総務省 技術系（情報通信分野） → 単純に人気なので玉砕覚悟で早めに挑戦したい</li>
<li>国立公文書館 → 専門とあっている、スキルが活かせるか？</li>
<li>経産省</li>
<li>文科省</li>
<li>環境省</li>
<li>関東総合通信局</li>
<li>厚生労働省</li>
<li>農水省</li>
<li>防衛省 情報本部&amp;本省</li>
<li>デジタル庁 → 日曜午前を狙いたい</li>
<li>関東管区警察局&amp;東京都警察情報通信部</li>
</ol>
<p>あとは起きてから考える</p>
<p>合同説明会の予約もあるので、そこんとこ注意</p>
<h1>合同説明会 7/6(木)</h1>
<p>※だいたい午前中に終わらせればヨシ！！！！！！</p>
<p>文科省、公文書館、防衛省（本省＆情報本部）、総務省 関東総合通信局、関東管区警察局・東京都警察情報通信部</p>
<ol>
<li><a href="https://www.mext.go.jp/b_menu/saiyou/ippangijyutsu/detail/1387690.htm" target="_blank" rel="noopener noreferrer">第１回 　９：３０～１０：１５ 文部科学省</a> → 　 18 時〆切！</li>
<li><a href="https://job.axol.jp/jn/s/meti_24/yoyaku_2924130320" target="_blank" rel="noopener noreferrer">第２回 １０：３０～１１：１５ 経済産業省</a>　 → 　 15 時〆切！ Microsoft Teams</li>
<li><a href="https://job.axol.jp/jn/s/fsa_24/public/schedule/2" target="_blank" rel="noopener noreferrer">第３回　 11:30-12:15 金融庁</a> → 午前中！ Cisco Webex</li>
<li><a href="https://www.mod.go.jp/j/form/saiyou/schedule/form_is_d_20230616c.html" target="_blank" rel="noopener noreferrer">第 4 回 13:30 ～ 14:15（45 分） 【技術区分向け】統合幕僚監部、陸上自衛隊、海上自衛隊、航空自衛隊、情報本部、地方防衛局、防衛装備庁</a>　 → 　 13 時〆切！</li>
<li><a href="https://www.soumu.go.jp/soutsu/kanto/saiyou/godosetsumeikai.html" target="_blank" rel="noopener noreferrer">第５回　 14:30-15:15 　総務省 関東総合通信局</a> → 午前中！</li>
<li><a href="https://www.kanto.npa.go.jp/recruit/s-keimu-20230622-20230706.pdf" target="_blank" rel="noopener noreferrer">第６回 １５：３０～１６：１５ 関東管区警察局・東京都警察情報通信部</a>→ 13 時〆切！　 Cisco Webex</li>
</ol>
<p>早起きして頑張ろう(๑•̀ㅂ•́)و✧</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="官庁訪問" term="官庁訪問"/>
        <category label="国家公務員" term="国家公務員"/>
        <category label="一般職" term="一般職"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[netkeiba のデータをスクレイピングして LOD 化する（7）]]></title>
        <id>https://ningensei848.github.io/2023/03/03/</id>
        <link href="https://ningensei848.github.io/2023/03/03/"/>
        <updated>2023-03-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前回の記事では、構想を練るところまでやった。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://ningensei848.github.io/2023/02/07">前回の記事</a>では、構想を練るところまでやった。</p>
<p><img decoding="async" loading="lazy" alt="ML4Keiba Workflow" src="https://ningensei848.github.io/assets/images/ml4keiba_workflow-bc65a50599c111d74a8f09086f2f214b.png" width="1194" height="1076" class="img_ev3q"></p>
<p>苦節一ヶ月、ついに実現し<strong>毎日自動でデータを集め、それが BigQuery にロードされるようになった</strong>ので、苦労した点をつらつらと書いていく。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="目次">目次<a href="https://ningensei848.github.io/2023/03/03/#%E7%9B%AE%E6%AC%A1" class="hash-link" aria-label="Direct link to 目次" title="Direct link to 目次">​</a></h2>
<ol>
<li>そもそもプロダクト(Pub/Sub)の役割がわかっていなかった</li>
<li>CloudEvent ってなに？</li>
<li>イベント駆動の Cloud Functions (Gen 2) はどうやってデプロイするの？</li>
<li>BigQuery にはユニーク制約が無い！</li>
<li>BigQuery は何でも入れればいいわけではない</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-pubsub-の役割">1. Pub/Sub の役割<a href="https://ningensei848.github.io/2023/03/03/#1-pubsub-%E3%81%AE%E5%BD%B9%E5%89%B2" class="hash-link" aria-label="Direct link to 1. Pub/Sub の役割" title="Direct link to 1. Pub/Sub の役割">​</a></h2>
<p><a href="https://cloud.google.com/scheduler" target="_blank" rel="noopener noreferrer">Cloud Scheduler</a> については、まぁすぐに理解できた。
単に Cron を設定してその時間通りに Pub/Sub を起動するだけだからだ。</p>
<p>が、「Pub/Sub 起動する」ってなに？？？となってしまった。。。</p>
<hr>
<blockquote>
<p>Pub/Sub は、メッセージを生成するサービスを、それらのメッセージを処理するサービスと切り離す、非同期のスケーラブルなメッセージング サービスです。</p>
<p>cf. <a href="https://cloud.google.com/pubsub/docs/overview" target="_blank" rel="noopener noreferrer">https://cloud.google.com/pubsub/docs/overview</a></p>
</blockquote>
<p>これだけをはじめて読んだときは「？？？」としかならないと思うんだが、次の記事を読みつつ自分で手を動かしてみることで理解することができた：</p>
<blockquote>
<p><a href="https://laboratory.kiyono-co.jp/69/gcp/" target="_blank" rel="noopener noreferrer">【図解付き】Cloud Pub/Sub に概要や使い方についてわかりやすく解説 - KIYONO Engineer Blog</a></p>
</blockquote>
<p><a href="https://laboratory.kiyono-co.jp/69/gcp/" target="_blank" rel="noopener noreferrer">https://laboratory.kiyono-co.jp/69/gcp/</a></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="メッセージングサービスがないと">メッセージングサービスがないと……<a href="https://ningensei848.github.io/2023/03/03/#%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%8C%E3%81%AA%E3%81%84%E3%81%A8" class="hash-link" aria-label="Direct link to メッセージングサービスがないと……" title="Direct link to メッセージングサービスがないと……">​</a></h4>
<p>Pub/Sub のようなプロダクトがない場合、データの「送信元」「受信先」がすべて１対１対応になってしまい、複雑かつ情報ロストのリスクが増えてしまう。
例の通り４：４の構成だと、4 * 4 = 16 通りの経路が生じるし、n 個の構成物があれば n^2 に増大してしまう。。。</p>
<p><a href="https://laboratory.kiyono-co.jp/69/gcp/" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" alt="メッセージングサービスのないシステム構成図" src="https://ningensei848.github.io/assets/images/without_pubsub-b55817bc3c283ae95cd49874bc561767.jpeg" width="960" height="540" class="img_ev3q"></a></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="メッセージングサービスがあると">メッセージングサービスがあると……<a href="https://ningensei848.github.io/2023/03/03/#%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%8C%E3%81%82%E3%82%8B%E3%81%A8" class="hash-link" aria-label="Direct link to メッセージングサービスがあると……" title="Direct link to メッセージングサービスがあると……">​</a></h4>
<p>間に Pub/Sub を挟むことで、メッセージングサービスに管理を集中させることができる。
経路は一箇所にまとめられるし、Pub/Sub は機能したかだけを気にしていればよい。</p>
<p><a href="https://laboratory.kiyono-co.jp/69/gcp/" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" alt="メッセージングサービスを交えたシステム構成図" src="https://ningensei848.github.io/assets/images/with_pubsub-af99ac88720b0b17c7cfb2326a7898cc.jpeg" width="960" height="540" class="img_ev3q"></a></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="ml4keiba-では">ML4Keiba では<a href="https://ningensei848.github.io/2023/03/03/#ml4keiba-%E3%81%A7%E3%81%AF" class="hash-link" aria-label="Direct link to ML4Keiba では" title="Direct link to ML4Keiba では">​</a></h4>
<ol>
<li>Pub/Sub でトピックを作成する<!-- -->
<ul>
<li>ただ作成するだけ</li>
<li>処理を仲介するインスタンスを定義するイメージが近い</li>
</ul>
</li>
<li>このトピックを指定して Cloud Functions 関数をデプロイ<!-- -->
<ul>
<li>購読する（Subscript する）のがこの関数</li>
<li>言い換えれば、指定トピックのサブスクライバーの一つとしてこの関数を指定する</li>
</ul>
</li>
<li>Cloud Scheduler から毎日定時に事前設定したメッセージを <strong>Pub/Sub のトピックに向けてパブリッシュ</strong>する</li>
</ol>
<p>こうして、Pub/Sub 上の指定トピックが受け取ったペイロードを、そのままサブスクライバーたちに送信することができた
（メッセージのパブリッシュイベントを通じて CF 関数を発火させることができた）</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="勘違いしたこと">勘違いしたこと<a href="https://ningensei848.github.io/2023/03/03/#%E5%8B%98%E9%81%95%E3%81%84%E3%81%97%E3%81%9F%E3%81%93%E3%81%A8" class="hash-link" aria-label="Direct link to 勘違いしたこと" title="Direct link to 勘違いしたこと">​</a></h4>
<p>誤り　 → 　「Pub/Sub は Cloud Scheduler からしか起動できない！」</p>
<p>正解　 → 　「Pub/Sub は <strong>多様な Publisher から起動できる</strong>」</p>
<hr>
<p>Cloud Scheduler はあくまで数ある Publisher の一つでしかなく、Google がお手軽 Cron として提供しているだけである。</p>
<blockquote>
<p>Pub/Sub 環境は、Google Cloud Console、Cloud Shell、クライアント ライブラリ、REST API のいずれかを使用して設定できます。</p>
<p>cf. <a href="https://cloud.google.com/pubsub/docs/publish-receive-messages-client-library" target="_blank" rel="noopener noreferrer">Pub/Sub のクライアントライブラリ</a></p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-cloudevent-とは">2. CloudEvent とは<a href="https://ningensei848.github.io/2023/03/03/#2-cloudevent-%E3%81%A8%E3%81%AF" class="hash-link" aria-label="Direct link to 2. CloudEvent とは" title="Direct link to 2. CloudEvent とは">​</a></h2>
<p>Q. Pub/Sub でメッセージを送れるのはわかったけど、Cloud Functions でどうやってそれを購読すればいいの？
（Pub/Sub のサブスクライバーってどうすれば設定できるの？）</p>
<p>A. <a href="https://github.com/cloudevents/sdk-python/blob/main/cloudevents/http/event.py" target="_blank" rel="noopener noreferrer">CloudEvent オブジェクト</a>を引数として受け入れる CloudEvent 関数を作成する</p>
<hr>
<p><a href="https://github.com/python/mypy" target="_blank" rel="noopener noreferrer"><code>mypy</code></a> で型付ける時にどないすんねん 💢
とブチ切れたが、別途 <a href="https://github.com/cloudevents/sdk-python" target="_blank" rel="noopener noreferrer"><code>cloudevents</code></a> を入れてやればよかった。
オブジェクトにはプロパティとして <code>attributes</code> と <code>data</code> が含まれており、その <code>data</code> 内には、Pub/Sub がトリガーしたイベントでは(第２世代 Cloud Functions の場合)以下のようなオブジェクトが含まれている：</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">MessagePublishedData</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string-property property" style="color:#36acaa">"message"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 注）data は base64 で encode されている → デコードしてやる必要あり</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">"data"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">"attributes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">string</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">"messageId"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">"publishTime"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">"orderingKey"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p><a href="https://cloud.google.com/functions/docs/writing/write-event-driven-functions" target="_blank" rel="noopener noreferrer">イベント ドリブン関数を作成する &nbsp;|&nbsp; Google Cloud Functions に関するドキュメント</a>でも説明されているように、 Cloud Function (Gen 2) においてはすべて「CloudEvent 関数」を使用する。</p></div></div>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>danger</div><div class="admonitionContent_BuS1"><p>Pub/Sub トリガーを CloudEvent 関数で使う場合、データのペイロードは <a href="https://github.com/googleapis/google-cloudevents/blob/main/proto/google/events/cloud/pubsub/v1/data.proto" target="_blank" rel="noopener noreferrer"><code>MessagePublishedData</code></a> になる。</p><p><a href="https://cloud.google.com/functions/docs/tutorials/pubsub#preparing_the_application" target="_blank" rel="noopener noreferrer">Cloud Pub/Sub のチュートリアル（第 2 世代） &nbsp;|&nbsp; Google Cloud Functions に関するドキュメント</a>にもある通り、<code>cloud_event.data["message"]["data"]</code> という形でアクセスする。</p><p>得られる文字列は <strong><code>base64</code> でエンコードされた文字列</strong>であることにも留意すること。</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="サンプルコード">サンプルコード<a href="https://ningensei848.github.io/2023/03/03/#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89" class="hash-link" aria-label="Direct link to サンプルコード" title="Direct link to サンプルコード">​</a></h3>
<div class="tabs-container tabList__CuJ"><ul role="tablist" aria-orientation="horizontal" class="tabs"><li role="tab" tabindex="0" aria-selected="true" class="tabs__item tabItem_LNqP tabs__item--active">Python</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">TypeScript</li></ul><div class="margin-top--md"><div role="tabpanel" class="tabItem_Ymn6"><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">sample.py</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> base64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> functions_framework</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> cloudevents</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">http </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> CloudEvent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Triggered from a message on a Cloud Pub/Sub topic.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:#393A34">@functions_framework</span><span class="token decorator annotation punctuation" style="color:#393A34">.</span><span class="token decorator annotation punctuation" style="color:#393A34">cloud_event</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">subscribe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cloud_event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> CloudEvent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">None</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Your code here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Access the CloudEvent data payload via cloud_event.data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># base64 encoded string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cloud_event</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"message"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"data"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte_string</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">bytes</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> base64</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">b64decode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    decoded_txt</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> byte_string</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">decode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">decoded_txt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">sample.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> functions</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> CloudEvent </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@google-cloud/functions-framework'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> MessagePublishedData </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@google/events/cloud/pubsub/v1/MessagePublishedData'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Triggered from a message on a Cloud Pub/Sub topic.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">functions</span><span class="token punctuation" style="color:#393A34">.</span><span class="token generic-function function" style="color:#d73a49">cloudEvent</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">MessagePublishedData</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'subscribe'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cloudEvent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Your code here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Access the CloudEvent data payload via cloudEvent.data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// base64 encoded string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cloud_event</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"message"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"data"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte_string </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Buffer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'base64'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    decoded_txt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> byte_string</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    concole</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">decoded_txt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></div>
<p>つまり、Pub/Sub でトリガーした Cloud Functions 関数は、<code>subscribe()</code> 以下を起点として実行すればよい。</p>
<p>cf. <a href="https://cloud.google.com/functions/docs/tutorials/pubsub" target="_blank" rel="noopener noreferrer">Cloud Pub/Sub のチュートリアル（第 2 世代） &nbsp;|&nbsp; Google Cloud Functions に関するドキュメント</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-イベント駆動の-cloud-functions-gen-2-のデプロイ方法">3. イベント駆動の Cloud Functions (Gen 2) のデプロイ方法<a href="https://ningensei848.github.io/2023/03/03/#3-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E9%A7%86%E5%8B%95%E3%81%AE-cloud-functions-gen-2-%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E6%96%B9%E6%B3%95" class="hash-link" aria-label="Direct link to 3. イベント駆動の Cloud Functions (Gen 2) ��のデプロイ方法" title="Direct link to 3. イベント駆動の Cloud Functions (Gen 2) のデプロイ方法">​</a></h2>
<p>Cloud Functions 関数において、 Pub/Sub をトリガーとして CloudEvent をサブスクライブすることで実行できることはわかった。
しかし、その 関数はどうやって設置、もとい GCP 上で実行できるようにすればいいんだ？</p>
<p>当然、GCP のコンソールからポチポチやればできるとして、それ以外には <strong><a href="https://cloud.google.com/functions/docs/deploy#gcloud" target="_blank" rel="noopener noreferrer"><code>gcloud CLI</code> を使う方法がある</a></strong>。
この CLI を用いてコマンドを実行する際に、オプション引数として <code>--trigger-topic</code> フラグの値に 購読したい Pub/Sub トピックの名前を渡してやればよい。</p>
<p>cf. <a href="https://cloud.google.com/functions/docs/calling/pubsub" target="_blank" rel="noopener noreferrer">Pub/Sub トリガー &nbsp;|&nbsp; Google Cloud Functions に関するドキュメント</a></p>
<hr>
<p>他に注意すべき点として、以下の三点が挙げられる：</p>
<ol>
<li><code>--entry-point</code> フラグを用いてエントリーポイントを指定する</li>
<li><code>--source</code> フラグを用いて指定するディレクトリには、構造について必須要件がある</li>
<li>外部ライブラリを用いている場合には、言語ごとのアプローチで依存関係を指定して解決する</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="エントリーポイントの指定">エントリーポイントの指定<a href="https://ningensei848.github.io/2023/03/03/#%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%BC%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E6%8C%87%E5%AE%9A" class="hash-link" aria-label="Direct link to エントリーポイントの指定" title="Direct link to エントリーポイントの指定">​</a></h3>
<p>GCP 側に対して、どの関数を実行するのかを明確に伝えてやる必要がある。
そのために指定するのがエントリーポイントである。</p>
<p>例に上げた Python, Node.js の両方とも、エントリーポイント名は <code>subscribe</code> である。
<code>@functions_framework.cloud_event</code> あるいは <code>functions.cloudEvent</code> で渡してやることで、エントリーポイントとして登録されたことになるらしい。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ディレクトリの必須要件">ディレクトリの必須要件<a href="https://ningensei848.github.io/2023/03/03/#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E5%BF%85%E9%A0%88%E8%A6%81%E4%BB%B6" class="hash-link" aria-label="Direct link to ディレクトリの必須要件" title="Direct link to ディレクトリの必須要件">​</a></h3>
<p><a href="https://cloud.google.com/functions/docs/writing#directory-structure" target="_blank" rel="noopener noreferrer">ソース ディレクトリの構造 | Cloud Functions の関数を作成する | Google Cloud Functions に関するドキュメント</a> を見れば分かる通り、<strong>各言語ランタイムごとにソースコードの構造に制限がある</strong>。</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Python の場合</summary><div><div class="collapsibleContent_i85q"><p>例えば <code>Python</code> では、<code>--source</code> で指定したディレクトリ内に <code>main.py</code> を置き、その中にエントリーポイントを登録しなければならない。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── main.py</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote>
<p>Cloud Functions は、関数ディレクトリのルートにある main.py という名前のファイルからソースコードを読み込みます。
メインファイルの名前は main.py にする必要があります。</p>
</blockquote></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Node.js の場合</summary><div><div class="collapsibleContent_i85q"><p><code>Node.js</code> では、<code>--source</code> で指定したディレクトリ内に <code>package.json</code> と その中の項目 <code>main</code> で指定したスクリプト (e.g. <em>index.js</em>) が存在していなければならない。</p><blockquote>
<p>Node.js 関数の基本的なディレクトリ構造は次のとおりです。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── index.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── package.json</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>デフォルトでは、Cloud Functions は関数ディレクトリのルートにある <em>index.js</em> というファイルからソースコードを読み込みます。
別のメイン ソースファイルを指定するには、package.json ファイルの <code>main</code> フィールドを使用します。</p>
</blockquote></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="依存性解決">依存性解決<a href="https://ningensei848.github.io/2023/03/03/#%E4%BE%9D%E5%AD%98%E6%80%A7%E8%A7%A3%E6%B1%BA" class="hash-link" aria-label="Direct link to 依存性解決" title="Direct link to 依存性解決">​</a></h3>
<p>言い換えれば、どうやってスクリプトが使用している外部ライブラリを指定するかという問題である。</p>
<p>Python の場合には <a href="https://github.com/GoogleCloudPlatform/functions-framework-python" target="_blank" rel="noopener noreferrer"><code>functions-framework==3.*</code></a> が含まれた <em>requirements.txt</em> を、Node.js の場合には <code>dependencies</code> に <code>"@google-cloud/functions-framework": "^3.0.0"</code> が含まれた <em>package.json</em> をディレクトリ内に設置する必要がある。</p>
<ul>
<li><a href="https://cloud.google.com/functions/docs/writing/specifying-dependencies-python" target="_blank" rel="noopener noreferrer">Python での依存関係の指定 &nbsp;|&nbsp; Google Cloud Functions に関するドキュメント</a></li>
<li><a href="https://cloud.google.com/functions/docs/writing/specifying-dependencies-nodejs" target="_blank" rel="noopener noreferrer">Node.js での依存関係の指定 &nbsp;|&nbsp; Google Cloud Functions に関するドキュメント</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="最終的なデプロイコマンド">最終的なデプロイコマンド<a href="https://ningensei848.github.io/2023/03/03/#%E6%9C%80%E7%B5%82%E7%9A%84%E3%81%AA%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89" class="hash-link" aria-label="Direct link to 最終的なデプロイコマンド" title="Direct link to 最終的なデプロイコマンド">​</a></h3>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcloud functions deploy YOUR_FUNCTION_NAME \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --gen2 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --region YOUR_REGION \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --runtime YOUR_RUNTIME \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --source YOUR_SOURCE_LOCATION \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --entry-point YOUR_CODE_ENTRYPOINT \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --trigger-topic YOUR_PUBSUB_TOPIC</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><blockquote>
<p>最初の引数 YOUR_FUNCTION_NAME は、デプロイされた関数の名前です。</p>
<p>第 1 世代の関数名は、<strong>先頭が英文字で、その後に最大 62 文字の英文字、数字、ハイフン、アンダースコアで構成</strong>します。末尾は英文字または数字にする必要があります。</p>
<p>第 2 世代のルールも同様ですが、<strong>最初の文字は英小文字にする必要があり、アンダースコアは使用できません</strong>。</p>
</blockquote></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p><code>gcloud functions deploy</code> には、他にも様々なオプション設定を渡すことができる。</p><ul>
<li><code>--memory</code> ... 実行時のメモリサイズを指定する<!-- -->
<ul>
<li>いくつかの中から選ばなければならない<!-- -->
<ul>
<li>cf. <a href="https://cloud.google.com/functions/docs/configuring/memory" target="_blank" rel="noopener noreferrer">https://cloud.google.com/functions/docs/configuring/memory</a></li>
</ul>
</li>
<li>どれを選んだかによって、どのくらい <a href="https://cloud.google.com/compute/docs/cpu-platforms" target="_blank" rel="noopener noreferrer">vCPU</a> が割り当てられるか変動する</li>
</ul>
</li>
<li><code>--service-account</code> ... サービスアカウントを指定する<!-- -->
<ul>
<li>CF 関数が他のプロダクトと連携する場合、適切な IAM を付与したサービスアカウントを割り当てる必要がある</li>
<li>指定しない場合、Cloud Functions のデフォルトサービスアカウントが割り当てられる</li>
</ul>
</li>
<li><code>--timeout</code> ... 最大実行時間を設定する<!-- -->
<ul>
<li>max は 3600s だが、CloudEvent をトリガーとする場合には 540s に制限されるとか</li>
</ul>
</li>
<li><code>--set-env-vars</code> ... 環境変数を指定する<!-- -->
<ul>
<li>秘密情報は <code>--set-secrets</code> で渡すとよい</li>
</ul>
</li>
<li><code>--update-labels</code> ... ラベルを付与する<!-- -->
<ul>
<li>多数の関数をデプロイする際に、コンソール側においてはラベルごとフィルタできると便利</li>
</ul>
</li>
</ul><p>cf. <a href="https://cloud.google.com/sdk/gcloud/reference/functions/deploy" target="_blank" rel="noopener noreferrer"><code>gcloud functions deploy</code> | Google Cloud CLI Documentation</a></p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-ユニーク制約-not-in-bigquery">4. ユニーク制約 not in BigQuery<a href="https://ningensei848.github.io/2023/03/03/#4-%E3%83%A6%E3%83%8B%E3%83%BC%E3%82%AF%E5%88%B6%E7%B4%84-not-in-bigquery" class="hash-link" aria-label="Direct link to 4. ユニーク制約 not in BigQuery" title="Direct link to 4. ユニーク制約 not in BigQuery">​</a></h2>
<p>普通のデータベースだったら確実に存在している「ユニーク制約」という概念が BigQuery にはない。
すなわち、Insert 命令を出したら特に重複等は検証せずそのまま追加してしまう。</p>
<p>どうすれば重複しないように BigQuery に読み込むことができるだろうか？</p>
<p>結論を言えば、以下の二点の工夫を凝らせば実現できた：</p>
<ol>
<li>GCS 側にアップロードする際に「新規作成」だけを許可して「更新」を拒否する</li>
<li>ファイルごとに固有の ID を振り分け、データにも冪等性を確保する</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rerational-db-を使う">Rerational DB を使う<a href="https://ningensei848.github.io/2023/03/03/#rerational-db-%E3%82%92%E4%BD%BF%E3%81%86" class="hash-link" aria-label="Direct link to Rerational DB を使う" title="Direct link to Rerational DB を使う">​</a></h3>
<p>本来であれば、抽出したデータをそのままロードするのではなく、一旦オペレーショナル DB に突っ込んでユニーク制約を付けてから読み出す方法が一般的だろう。
企業で持っているデータとかから BigQuery に入れたいというときなどはぜひともそのようにすべきだ。</p>
<p>もちろんそのようにしたとしても、その操作を複数回行なってしまうと元も子もないため、ある程度の対策を寝る必要はあるらしい。</p>
<p>cf. <a href="https://techblog.zozo.com/entry/idempotent-data-insert-in-bigquery" target="_blank" rel="noopener noreferrer">BigQuery でのデータ追記処理における冪等化の取り組み - ZOZO TECH BLOG</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="工夫してなんとかする">工夫してなんとかする<a href="https://ningensei848.github.io/2023/03/03/#%E5%B7%A5%E5%A4%AB%E3%81%97%E3%81%A6%EF%BF%BD%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%99%E3%82%8B" class="hash-link" aria-label="Direct link to 工夫してなんとかする" title="Direct link to 工夫してなんとかする">​</a></h3>
<p>で、ML4Keiba においてはオペレーショナル DB は存在しない。
かといって新たに Cloud SQL とか契約するのも、無駄なコストが嵩むようで嫌だ。
実際にサービスインできる目処が立ったとかならまだしも、ユニーク制約を確保したいというだけでランニングコストを増やすのは、どうにかして回避したい。</p>
<p>一つは、「冪等性の確保」を考えた。
ファイルごとに個別の ID で管理し、GCS に突っ込む際に「新規作成は許すけど更新は拒否する」という処理が実現できれば、常に独立したデータだけが蓄積されていくことになる。
こうすれば BigQuery への load には、<a href="https://cloud.google.com/functions/docs/calling/storage" target="_blank" rel="noopener noreferrer">GCS のオブジェクトファイナライズトリガー</a>を使えばよいだけとなる。</p>
<hr>
<p>じゃあ、この個別の ID とはなんぞや？という部分を考えるだけなのだが、ここは幸いもとからうまいこと設計されていた。</p>
<p>データを取ってくる際に、レース情報は日付 <code>YYYYMMDD</code> をシード値としていたため、これをそのままディレクトリ構造に転用することで、ファイルの重複を防ぐことができた。
レースの情報以外には馬自身の情報（プロフィール）が必要となるが、そちらは馬ごとに固有の ID (<code>horse_id</code>)で管理することができる。</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p>馬のプロフィールには、調教師やオーナー、獲得賞金、通算成績などがページには含まれている。
これらの情報は<strong>更新可能性がある</strong>データなので冪等ではない…のだが、実際問題ほとんど変化しないものと考えてよいだろう。</p><p>幸い、１０万ほどの馬情報を収集してもそれほど大きなデータにはならないため、年に一回程度の頻度で更新できれば良いと考えている。</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-bigquery-はゴミ箱じゃない">5. BigQuery はゴミ箱じゃない<a href="https://ningensei848.github.io/2023/03/03/#5-bigquery-%E3%81%AF%E3%82%B4%E3%83%9F%E7%AE%B1%E3%81%98%E3%82%83%E3%81%AA%E3%81%84" class="hash-link" aria-label="Direct link to 5. BigQuery はゴミ箱じゃない" title="Direct link to 5. BigQuery はゴミ箱じゃない">​</a></h2>
<p>GIGO: Garbage In, Garbage Out という言葉もある通り、ゴミデータを分析したところでゴミしか得られない……のだが、それ以前の問題として<strong>スキーマをきちんと定義しないと BigQuery にロードすることもできない</strong>という状況に直面した。
というのも、ロードする際にオプションとして <code>autodetect</code> を指定していたことが原因だ。</p>
<p>例えば大きなデータを複数個同時に読み込ませるなら問題は起こりにくい。
一箇所では整数型っぽいが、他方では文字列型っぽいという状態を含むだろうからだ。
しかし、小さなデータを一つずつ少しずつ入れていく場合、最初に入れたデータが初見では整数型に見えるが実は文字列型でした！なんてことがザラに起きる。もちろん型が異なれば、うまく読み込めずエラーが起きる。</p>
<p>こうならないためには、きちんと手動で型を定義する、もといスキーマを定義してやる必要がある。
これがつらい……</p>
<p>CSV なら、ヘッダーに含まれるカラム数の分だけ一対一対応するスキーマを書かねばならない。
テーブルが一つ二つならまだしも、十より多くなると悲惨である。</p>
<p>それでも、きちんと読み込ませるには自分で地道にスキーマを書くことが必要だ。
心を無にして、目の前のデータ型定義を進めよう。。。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="総括">総括<a href="https://ningensei848.github.io/2023/03/03/#%E7%B7%8F%E6%8B%AC" class="hash-link" aria-label="Direct link to 総括" title="Direct link to 総括">​</a></h2>
<p>料金の内訳はｍおおよそ以下の通り：</p>
<ul>
<li>Cloud Scheduler ... ¥0</li>
<li>Cloud Pub/Sub ... ¥0</li>
<li>Cloud Storage ... ¥100</li>
<li>Cloud Functions ... ¥900</li>
<li>BigQuery ... ¥0</li>
</ul>
<p>Cloud Functions を読んでリクエストしまくったから結構行くかな〜と思っていたら 1000 円そこらで収まってしまった。
あまりにも激安で心配になるレベルである。</p>
<p>ちなみにこれはイニシャルコストというだけで、今後は GCS のストレージ料金が固定で ¥100 - ¥200 くらいと、BigQuery でクエリを実行し得られたデータ分だけとなる。
BigQuery に課金されるくらいデータ分析を重ねたいものであるなぁ……</p>
<p>サービス云々については、まだ実際にやるかどうかは決めていない。
というかデータ分析をやっていい感じの成績が出せるかどうかもまだわからない。
もし出せそうなら、それを売りにしたデータ提供サイトでもつくるかな……</p>
<p>それより実現性が高い案として、例えば<a href="https://zenn.dev/kun432/articles/visualize-keiba-corner-pandas-plotly" target="_blank" rel="noopener noreferrer">pyparsing で競馬のコーナー通過順位をパース →Plotly で可視化</a>できるそうなので、そういう過去情報とかを馬ごと、レースごとに提供できると面白そうだ。
出走馬情報については一日前に取得できるから、その馬の数がおおよそ 12 頭 * 12 R * 3 会場 で 450 くらいとなる。
そのぐらいなら、GitHub Pages でどうにか静的ページに落とし込めそうだと思う。
ぜひやりてぇな………</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="python" term="python"/>
        <category label="競馬" term="競馬"/>
        <category label="GCS" term="GCS"/>
        <category label="DWH" term="DWH"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[netkeiba のデータをスクレイピングして LOD 化する（6）]]></title>
        <id>https://ningensei848.github.io/2023/02/07/</id>
        <link href="https://ningensei848.github.io/2023/02/07/"/>
        <updated>2023-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ML4Keiba に関する昨年の記事でも書いたように、ローカルだけでなくクラウド側にデータを保存し、それらをクラウド上の DB におさめて分析あるいはサービス提供できるようにしたいと考えている。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://ningensei848.github.io/2022/11/14">ML4Keiba に関する昨年の記事</a>でも書いたように、ローカルだけでなくクラウド側にデータを保存し、それらをクラウド上の DB におさめて分析あるいはサービス提供できるようにしたいと考えている。</p>
<p>そんな折、以下の書籍を読む機会があり、そこでおおよその方向性がつかめたのでそれをまとめる。</p>
<p><a href="https://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9F%BA%E7%9B%A4%E3%81%B8%E3%81%AE%E5%87%A6%E6%96%B9%E7%AE%8B%E3%80%9C-%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E4%BE%A1%E5%80%A4%E5%89%B5%E5%87%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%83%BB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%BB%E3%83%92%E3%83%88%E3%81%AE%E3%83%8E%E3%82%A6%E3%83%8F%E3%82%A6-%E3%82%86%E3%81%9A%E3%81%9F%E3%81%9D/dp/4297124459?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;crid=1HANW989QOGUU&amp;keywords=%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9F%BA%E7%9B%A4%E3%81%B8%E3%81%AE%E5%87%A6%E6%96%B9%E7%AE%8B&amp;qid=1675237604&amp;sprefix=%2Caps%2C180&amp;sr=8-1&amp;linkCode=li2&amp;tag=ningensei840a-22&amp;linkId=5eb6e6032a2cf49395b3a610e7dbd4e6&amp;language=ja_JP&amp;ref_=as_li_ss_il" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" src="https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4297124459&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=ningensei840a-22&amp;language=ja_JP" alt="実践的データ基盤への処方箋〜 ビジネス価値創出のためのデータ・システム・ヒトのノウハウ 単行本（ソフトカバー） – 2021/12/11" class="img_ev3q"></a></p>
<p><a href="https://amzn.to/3DMKKQS" target="_blank" rel="noopener noreferrer">https://amzn.to/3DMKKQS</a></p>
<p>一言で言えば、　<strong>Cloud Functions x GCS x BigQuery で DWH をつくる構想</strong> といったところだろうか。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="データレイクとデータウェアハウスdwh">データレイクとデータウェアハウス（DWH）<a href="https://ningensei848.github.io/2023/02/07/#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AC%E3%82%A4%E3%82%AF%E3%81%A8%E3%83%87%E3%83%BC%E3%82%BF%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%8F%E3%82%A6%E3%82%B9dwh" class="hash-link" aria-label="Direct link to データレイクとデータウェアハウス（DWH）" title="Direct link to データレイクとデータウェアハウス（DWH）">​</a></h2>
<p>まず、データレイクとは "Data Lake" であり、データソースという水源を一箇所に貯めておく湖（lake）のようなものであるらしい。
整っている必要は必ずしもなく、乱雑なデータをボンボコ入れていく場所を用意して<strong>必要になるかもしれないデータをすべて集積する</strong>ことに価値をおいている。
ロギングデータだったり複数部署から集めたデータだったり、たくさんあるし分析には必要だろうが、そのままでは使えないデータを一時的に（といいつつ半永久的に）保存しておくことになる。</p>
<p>データウェアハウス（DWH: Data Ware House）とは、データレイクに集めた<strong>データを分析できる状態に整理して堆積したもの</strong>であるようだ。
"Warehouse" で「倉庫」の意味であり、後に使うことを想定して収める際に整頓するという現実世界でのイメージと沿うだろうか。
また、「堆積」という語を使ったがこれには垂直方向のデータ圧縮すなわち「列指向圧縮」を意味している。
テキストや数値データをバイナリに変換し、Aggregation しやすいようにクエリ発行も専用のチューニングが施されているらしい。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="google-cloud-storage-と-bigquery">Google: Cloud Storage と BigQuery<a href="https://ningensei848.github.io/2023/02/07/#google-cloud-storage-%E3%81%A8-bigquery" class="hash-link" aria-label="Direct link to Google: Cloud Storage と BigQuery" title="Direct link to Google: Cloud Storage と BigQuery">​</a></h2>
<p>御存知の通り、GCS こと Google Cloud Storage は Google が誇る堅牢なクラウドストレージであり、前述したデータレイクとして利用する。
ここに貯めたデータから必要なものを抽出し大規模分析に活用するのが、データウェアハウスとしての BigQuery である。</p>
<p>AWS こと Amazon Web Services の S3<!-- -->:Simple<!-- --> Storage Service をストレージとして採用する場合もあるだろう。
（曰く、GCS は癖があるとか、AWS のほうがサポートが手厚い[?]からメインは AWS に置きたいらしい）
その場合でも、BigQuery からデータを読み取って利用することができる。
もっとも、AWS にも同様の機能を持つ<a href="https://aws.amazon.com/jp/redshift/" target="_blank" rel="noopener noreferrer">Amazon Redshift</a> があるらしいのだが……機能としてどちらのほうが優れているのだろうか？
知名度的には BigQuery に軍配が上がりそうだ。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="データの読み込み">データの読み込み<a href="https://ningensei848.github.io/2023/02/07/#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF" class="hash-link" aria-label="Direct link to データの読み込み" title="Direct link to データの読み込み">​</a></h3>
<p>BigQuery は手元のファイルを直接読み込ませることにも対応しているが、今後サービス提供まで見据えてオペレーショナル DB も持つことを考えると、一旦はすべてを GCS に集積しておく方がいいだろう。
それを踏まえると、どうやって BigQuery から GCS のデータを読み取ればよいのだろうか。</p>
<p><a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-csv" target="_blank" rel="noopener noreferrer">Cloud Storage からの CSV データの読み込み | BigQuery&nbsp;| Google Cloud</a> を見ると、<code>Node.js</code> および <code>Python</code> で BigQuery のクライアントライブラリが提供されており、適切に初期設定を施した後、GCS の URI を指定すればあとはよしなにやってくれるようだ。
しかし、これだと単一ファイルしかロードできず、フォルダ内の膨大なファイル群を処理するには面倒……と思っていたところ、<code>*</code>（アスタリスク）を用いることで指定フォルダのサブフォルダまで再帰的に探ってまとめてロードしてくれるらしい。</p>
<p>cf. <a href="https://cloud.google.com/bigquery/docs/batch-loading-data#load-wildcards" target="_blank" rel="noopener noreferrer">Cloud Storage の URI でのワイルドカードの使用</a></p>
<p>だが、定期的に GCS へ更新データを入れた際に毎回フォルダ全体をアップロードしていては非効率だし重複データで溢れてしまう。
最初だけこの方法を用いて、更新データについては一つ一つ処理する必要がありそう……と思ったのも束の間、Cloud Functions には<a href="https://cloud.google.com/functions/docs/calling/storage" target="_blank" rel="noopener noreferrer">GCS のイベントトリガー</a>が実装されており、この内 <code>google.cloud.storage.object.v1.finalized</code> （ファイナライズ / 作成：オブジェクトの作成または上書き）　の際に実行されるようにすれば良いことがわかった。</p>
<p>贅沢を言えば、このイベントで受け取ったファイルが「新規作成」なのか「既存ファイルの更新」なのかは判定したいところだ。
既存のものを BigQuery にロードしてしまうと、重複データが入り込んでしまい後顧の憂いとなりうる（杞憂かもしれないが）。</p>
<p>"Cloud Storage トリガの Cloud Function (第 2 世代) では、トリガの情報 (Cloud Storage にアップロードされたオブジェクトのパスやファイル名、サイズ等) が <a href="https://cloud.google.com/eventarc/docs/cloudevents" target="_blank" rel="noopener noreferrer"><em>CloudEvent</em> 形式</a> で渡され"<sup><a href="https://ningensei848.github.io/2023/02/07/#user-content-fn-1-9d14e2" id="user-content-fnref-1-9d14e2" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup> てくるところまでは判明した。
しかし、このイベントで渡されるデータの中には「そのオブジェクトが更新されたものであるか」という確たる証明手段が含まれていない。
<a href="https://cloud.google.com/storage/docs/json_api/v1/objects#resource-representations" target="_blank" rel="noopener noreferrer">オブジェクトのプロパティに関する仕様説明</a>を読むと、おそらく <code>timeCreated</code> と <code>updated</code> <sup><a href="https://ningensei848.github.io/2023/02/07/#user-content-fn-2-9d14e2" id="user-content-fnref-2-9d14e2" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup> の一致を見ればよいはずだが、ごく短時間の間に GCS 側で metadata が更新されないとも限らない（更新されると <code>updated</code> の時刻がズレて更新ファイル判定されることになってしまう）。</p>
<p>「GCS にファイルをアップロードしてからファイナライズイベントが発生するまでの短時間では GCS がファイルオブジェクトのメタデータを更新することはない」という前提の元、 <em>CloudEvent</em> で返されるオブジェクトのプロパティ <strong><code>timeCreated</code> と <code>updated</code> とを単純に文字列として比較し、一致していれば新規ファイル、そうでなければ更新ファイル</strong>という判定方法を採用する。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="読み込みに関する注意点">読み込みに関する注意点<a href="https://ningensei848.github.io/2023/02/07/#%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E6%B3%A8%E6%84%8F%E7%82%B9" class="hash-link" aria-label="Direct link to 読み込みに関する注意点" title="Direct link to 読み込みに関する注意点">​</a></h3>
<p>GCS ↔ Cloud Functions ↔ BigQuery という接続・自動化が実現しそうな目処がたった。</p>
<p>が、その前にさらに CSV / JSON データの内容について制限があるようだ。</p>
<p>cf. <a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-csv#details_of_loading_csv_data" target="_blank" rel="noopener noreferrer">CSV データの読み込みの詳細 | BigQuery&nbsp;| Google Cloud</a></p>
<p>cf. <a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-json#details_of_loading_json_data" target="_blank" rel="noopener noreferrer">JSON データの読み込みの詳細 | BigQuery&nbsp;| Google Cloud</a></p>
<p>関係ありそうなものを抜粋すると以下の通り：</p>
<blockquote>
<p>CSV データまたは JSON データを読み込む場合、DATE 列の値に区切りとしてダッシュ（-）を使用し、YYYY-MM-DD（年-月-日）の形式にする必要があります。</p>
<p>JSON または CSV データを読み込む場合、TIMESTAMP 列のタイムスタンプ値の日付部分の区切りにはダッシュ（-）を使用し、日付は YYYY-MM-DD（年-月-日）の形式にする必要があります。タイムスタンプの時間部分 hh:mm<!-- -->:ss<!-- -->（時-分-秒）には、区切りとしてコロン（:）を使用します。</p>
</blockquote>
<p>これらの制限を念頭に、ETL のうち "T" の部分を再度実装を見直す必要がありそうだ。</p>
<hr>
<p>さらに、<a href="https://cloud.google.com/bigquery/docs/partitioned-tables" target="_blank" rel="noopener noreferrer"><strong>パーティショニング</strong></a>という概念にもぶつかった。
未だによくわかっていないが、取り敢えず大きすぎるテーブル一つで頑張るよりは複数に分けて（<em>partition</em>）やることで、</p>
<ol>
<li>データの管理や照会が簡単になる</li>
<li>クエリのパフォーマンスを高める</li>
<li>クエリによって読み取られるバイト数を減らしてコストを抑える</li>
</ol>
<p>といったメリットが得られるらしい。</p>
<p>BigQuery の場合は時間ごとに区切ることが一般的だが、その粒度によっては「一日ごと」だったり「年ごと」だったりする。
本案件のような場合、前者だと小さすぎるし後者だと大きすぎるので、「月ごと」の分割を採用するのが良いと考えている。</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary> 参考：「列ベースの時間パーティショニング」の採用判断基準</summary><div><div class="collapsibleContent_i85q"><p>cf. <a href="https://cloud.google.com/bigquery/docs/partitioned-tables#when_to_use_partitioning" target="_blank" rel="noopener noreferrer">https://cloud.google.com/bigquery/docs/partitioned-tables#when_to_use_partitioning</a></p><blockquote>
<p>次のシナリオでは、テーブルのパーティショニングを検討してください。</p>
<ul>
<li>テーブルの一部のみをスキャンすることで、クエリのパフォーマンスを向上させる必要がある。</li>
<li>テーブル オペレーションが割り当てを超えており、テーブル オペレーションの範囲を特定のパーティション列の値に設定できる。</li>
<li><strong>クエリを実行する前にクエリ費用を把握する必要がある</strong>。</li>
</ul>
<p>BigQuery では、パーティション分割テーブルにクエリを実行する前のクエリ費用の見積もりが提供されます。
パーティション分割テーブルをプルーニングすることでクエリ費用を見積もり、続いてクエリ ドライランを発行してクエリ費用を見積もります。</p>
<hr>
<p>次のような場合は、テーブルをパーティショニングするのではなく、クラスタリングを検討してください。</p>
<ul>
<li>パーティショニングで許容されるよりも、細かい粒度が必要。</li>
<li>通常、クエリによって複数列に対するフィルタまたは集計が使用されている。</li>
<li>1 つの列または列グループの値のカーディナリティが大きい。</li>
<li>クエリを実行する前に厳密な費用見積もりが必要ない場合。</li>
</ul>
<p>このような場合、テーブル クラスタリングでは、ユーザー定義の並べ替えプロパティに基づいて特定の列のデータをクラスタリングすることで、クエリを高速化できます。</p>
</blockquote></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="さらなる自動化を目指して">さらなる自動化を目指して<a href="https://ningensei848.github.io/2023/02/07/#%E3%81%95%E3%82%89%E3%81%AA%E3%82%8B%E8%87%AA%E5%8B%95%E5%8C%96%E3%82%92%E7%9B%AE%E6%8C%87%E3%81%97%E3%81%A6" class="hash-link" aria-label="Direct link to さらなる自動化を目指して" title="Direct link to さらなる自動化を目指して">​</a></h2>
<p>GCS にデータを集積すれば、それを検知して BigQuery に堆積してくれるところまでは実現できそうな見通しが立てられた。
次は、GCS へのデータ集積を自動化、もとい定期実行できるようにしたい。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="github-actions">GitHub Actions<a href="https://ningensei848.github.io/2023/02/07/#github-actions" class="hash-link" aria-label="Direct link to GitHub Actions" title="Direct link to GitHub Actions">​</a></h3>
<p>まず考えたのは、これまで通り GitHub Actions で定期実行する方法だ。
時間的な上限があるとはいえ、それを超えない限りはいつまでも無料なのが最大の強みである。</p>
<p>さて、<a href="https://cloud.google.com/storage/docs/uploading-objects" target="_blank" rel="noopener noreferrer">ファイル システムからオブジェクトをアップロードする | Cloud Storage | Google Cloud</a>を見る限り、<code>bucket.blob.upload_from_filename(source_file_name)</code> あるいは <code>bucket.blob.upload_from_string(data, content_type)</code> を使用して、一つずつ地道にアップロードするしかないようだ。
（フォルダごとまとめてアップロード！とかはできない）</p>
<p>どうしてもまとめてアップロードしたい場合には、<code>gsutil</code> で <code>--recursive</code> オプションを使えばフォルダごとアップロードできる。</p>
<p><code>gsutil</code> がどのようにして料金が発生しているのか知る由もないが、JSON API でリクエスト（これはクラス A オペレーションなのでもっとも高めの料金となる）すると請求額がデカくなりそうでこわいという思いがある。
（まぁ 1000 回やってようやく $0.005 ~ $0.01 とかなので、たかが知れているといえばそうなのだが、ある程度は工夫して回数を減らしたいところである）</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gce">GCE<a href="https://ningensei848.github.io/2023/02/07/#gce" class="hash-link" aria-label="Direct link to GCE" title="Direct link to GCE">​</a></h3>
<p>やっすい仮想マシンを借りてそこで Cron を仕込めば、時間上限もなく上述の <code>gsutil</code> によるアップロードがかんたんに実現できる。
マシンパワーこそ心配だが、リージョンを揃えればデータ転送の利用料金を０に抑えられるかもしれない</p>
<p>……と思ったけどやはりマシンパワーがかなり心もとない気がする。
予期しない変なところで地雷を踏みそうな、そういう嫌な予感しかしないのであんまり積極的に採用したくはない、最終手段として残しておくべきか……？</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cloud-scheduler-x-pubsub-trigger-x-cloud-functions">Cloud Scheduler x Pub/Sub trigger x Cloud Functions<a href="https://ningensei848.github.io/2023/02/07/#cloud-scheduler-x-pubsub-trigger-x-cloud-functions" class="hash-link" aria-label="Direct link to Cloud Scheduler x Pub/Sub trigger x Cloud Functions" title="Direct link to Cloud Scheduler x Pub/Sub trigger x Cloud Functions">​</a></h3>
<p>横断的にサービスを利用する分、最も金が掛かりそうに感じるのがこのアプローチだ。
GCP において、Cron のように定期実行するアプローチは今の所これくらいしか提供されていない。
（あるいは提供されているとしても、この方法よりは割高であるようだ）</p>
<p><a href="https://cloud.google.com/functions/docs/writing#directory-structure-python" target="_blank" rel="noopener noreferrer">Cloud Functions の関数を作成する |&nbsp;Google Cloud Functions に関するドキュメント</a>というページには関数の作成方法が Python でやる場合も、Node.js でやる場合も詳しく説明されている。</p>
<p>また、<a href="https://cloud.google.com/functions/docs/bestpractices/tips" target="_blank" rel="noopener noreferrer">ヒントとコツ</a>なんていう記事も存在している。
これに従って実装するとパフォーマンスは上がり、料金は抑えられるだろう。</p>
<p>ローカル環境で関数が作成できたら、次はデプロイだ。
<a href="https://cloud.google.com/functions/docs/deploy" target="_blank" rel="noopener noreferrer">Cloud Functions の関数をデプロイする | Google Cloud Functions に関するドキュメント</a>を読むと、<code>gcloud CLI</code> を使って長ったらしいコマンドを実行する必要がありそうなのがわかる。</p>
<p>これでは面倒だ。
いちいちオプションを打ちたくはないし、typo ばかり増えてミスに泣かされるだろう。
（<code>gcloud CLI</code> で実行した命令は <code>Ctrl+C</code> を受け付けない）</p>
<p>そこで、タスクランナーの出番だ。
python で書いているから、この場合は <code>pyptoject.toml</code> に書くのがいいだろう。
<code>poetry run task deploy-function</code> あたりにしておけば確実だ。
細かなオプションについては、後々考えることとする(<a href="https://cloud.google.com/functions/docs/configuring/env-var" target="_blank" rel="noopener noreferrer">環境変数はどうするの</a>とか)。</p>
<p><em>Scheduler</em> と <em>Pub/Sub</em> については、<a href="https://cloud.google.com/scheduler/docs/tut-pub-sub" target="_blank" rel="noopener noreferrer">Pub/Sub を使用して Cloud ファンクションをトリガーする |&nbsp;Cloud Scheduler のドキュメント | Google Cloud</a>を見ながらポチポチすればよい。</p>
<hr>
<p>これで、Cloud Scheduler (Cron) ↔ Pub/Sub (Event Trigger) ↔ Cloud Functions (Extraction and Translation) ↔ GCS という形で定期的な自動実行が実現できそうな見通しが立てられたことになる。</p>
<p>先述の　 Load 自動化部分と組み合わせれば、ETL のワークフローすべてが自動化できたことになる。
BigQuery を使いこなして、座りしままに餅を食いたいねぇ……</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="まとめ">まとめ<a href="https://ningensei848.github.io/2023/02/07/#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to まとめ" title="Direct link to まとめ">​</a></h2>
<p>書籍から得た語彙の確認からはじめて、BigQuery 　と Cloud Storage の連携方法、Cloud Storage に自動で定期的にデータを集積する方法について、一から検討を重ねつつドキュメントを読み込んで全体設計を検討した。
サンプルコードには一切触れなかったが、参照先ドキュメントには豊富な事例がたくさんあるのでそれに倣うといいだろう。</p>
<p>次は、手元のデータ構造を見直しつつ、Cloud Functions の関数作成を行なって実装を完成に近づけよう。</p>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://ningensei848.github.io/2023/02/07/#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-9d14e2">
<p><a href="https://blog.g-gen.co.jp/entry/functions-2nd-gen-gcs-trigger" target="_blank" rel="noopener noreferrer">Cloud Storage トリガで Cloud Functions(2nd gen)を動かしてみた - G-gen Tech Blog</a> <a href="https://ningensei848.github.io/2023/02/07/#user-content-fnref-1-9d14e2" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-9d14e2">
<p>どちらも <code>datetime</code> 型としてフォーマットされた文字列である <a href="https://ningensei848.github.io/2023/02/07/#user-content-fnref-2-9d14e2" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="python" term="python"/>
        <category label="競馬" term="競馬"/>
        <category label="GCS" term="GCS"/>
        <category label="DWH" term="DWH"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023 年を考える]]></title>
        <id>https://ningensei848.github.io/2023/02/01/</id>
        <link href="https://ningensei848.github.io/2023/02/01/"/>
        <updated>2023-02-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[気づけば 2023 年も一ヶ月が過ぎてしまった。]]></summary>
        <content type="html"><![CDATA[<p>気づけば 2023 年も一ヶ月が過ぎてしまった。
自分の中ではまだ１２月半ばなのだが、そうなってしまったのは再度病院送りになって時間間隔が狂ってしまったことが原因だろう。</p>
<p>とはいえ、頭を切り替えて春〜夏以降に備える必要はある。
療養生活を怠惰に自堕落に過ごして目を背けてきたことと、改めて対峙する。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="大まかな野望">大まかな野望<a href="https://ningensei848.github.io/2023/02/01/#%E5%A4%A7%E3%81%BE%E3%81%8B%E3%81%AA%E9%87%8E%E6%9C%9B" class="hash-link" aria-label="Direct link to 大まかな野望" title="Direct link to 大まかな野望">​</a></h2>
<p>「目標」と据えてしまうと達成せねばならない圧力が強いので、達成したいなぁという気持ちだけ込めて「野望」としておく。
まずは大まかにこれを考えてみる。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="病気療養">病気療養<a href="https://ningensei848.github.io/2023/02/01/#%E7%97%85%E6%B0%97%E7%99%82%E9%A4%8A" class="hash-link" aria-label="Direct link to 病気療養" title="Direct link to 病気療養">​</a></h3>
<p>療養によって腹の傷が修復されることは大前提であろう。
昨年の１１月末に小腸が破けて搬送されて以来、かれこれ三ヶ月近く人工肛門（ストーマ）生活を強いられているが、これを解消し小腸をつなぎ直す。</p>
<p>免疫抑制剤であるステラーラ（生物学的製剤の一種でありかなり強力）を始めたのが１２月中旬で、以降８週間ごとに投与して、効果が十分に現れるのが２回目以降といわれている。
１２月中旬の二ヶ月後といえば今月２月の中旬あたりで、そのすぐあとに検査して快方に向かっていればつなぎ直す → リハビリ → 退院！</p>
<p>と、うまくいけば３月中にすべてが終わり４月から再スタートという流れなのだが、現実は甘くない。
というかそれに GO を出す外科医はよほどリスクテイカーであろう。
いざつないで見ても、蠕動運動を再開できなければオペの手間が二倍になる（すべてやりなおしになる）。</p>
<p>つまり、ステラーラの投与をもう一回分見てから検査＆それでよさそうならオペ開始ということになる。
すべては８週間ズレて、６月が完全復帰の時となるだろう。
あまりにも長い……</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="公務員試験">公務員試験<a href="https://ningensei848.github.io/2023/02/01/#%E5%85%AC%E5%8B%99%E5%93%A1%E8%A9%A6%E9%A8%93" class="hash-link" aria-label="Direct link to 公務員試験" title="Direct link to 公務員試験">​</a></h3>
<p>名簿に載ったまま残っているため、それを使えば職を得られるかもしれない。
時期は６月〜なので、完全復帰したあとに臨むことができる。</p>
<p>一方で更に上を志すのであれば、４月の上旬にはもう筆記試験（一次）が登竜門となる。</p>
<p><a href="https://www.jinji.go.jp/saiyo/siken/sougousyoku/daisotsuteido_sougou/daisotsuteido_sougou.html" target="_blank" rel="noopener noreferrer">国家公務員総合職試験</a></p>
<p>あと二ヶ月もないだろう、対策を講じる。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="お仕事">お仕事<a href="https://ningensei848.github.io/2023/02/01/#%E3%81%8A%E4%BB%95%E4%BA%8B" class="hash-link" aria-label="Direct link to お仕事" title="Direct link to お仕事">​</a></h3>
<p>人との縁に恵まれ、きつい思いをして主体的に探しに行かずともお仕事を貰えそうな段取りがついた。
大変有難い……。</p>
<p>ただし現在については、働き方を考える必要はある。
普通の健常人と比較して同期的に動けないのは当然として、もっと管理を厳格に行っていかねばならない。
すなわち、自分の仕事のあり方を客体化して働く、という向き合い方だ。</p>
<p>仕事の内容についてはここに書くことはできないが、おおよその方向性と内容、進め方についても話をすることができた。
あとはその量についてだが、それを確定させるにはどの程度の時間働けるのかについてある程度明確にせねばならない、当然ながら。</p>
<p>というわけで現在は、まず入院療養しつつどれくらい時間を確保できるのか測定して報告するというところから始めている。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="副業">副業<a href="https://ningensei848.github.io/2023/02/01/#%E5%89%AF%E6%A5%AD" class="hash-link" aria-label="Direct link to 副業" title="Direct link to 副業">​</a></h3>
<p>メインとは別に、サブとして資金源を確保したいという野望がある。</p>
<ol>
<li>ウェブ系プログラマーなら誰しも志すように、自分でサービスを作ってお金が稼げるようになりたい。</li>
<li>論文のもととなる実装を行ない、学術論文に名を残したい（ついでにこれがお金につながると嬉しい）</li>
</ol>
<p>まだまだ漠然としているが、いつかきっと……</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ライフステージ">ライフステージ<a href="https://ningensei848.github.io/2023/02/01/#%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8" class="hash-link" aria-label="Direct link to ライフステージ" title="Direct link to ライフステージ">​</a></h3>
<p>人生も進めていかねばならない。</p>
<p>ここで書いておかないと本当に二の次、三の次となって気づけば４０歳ということになりかねない……というのを繰り返してもうアラサーおっさん手前であるが。</p>
<p>とはいうものの、「健康ではない」「金も持ってない」「将来が安定していない」となるとどれだけ他が良くても最初から切り捨てられてしまうことは道理であろう。
まずはその足切り条件を克服するところから始めたい。</p>
<p>ぶっちゃけ将来的にお見合いだの集団結婚式だのであっても、取り敢えず結婚そして子をなすところまでは、最低限この世に生を受けたものの義務として全うしておきたいという気持ちはある。
（そりゃもちろん相手の人生を踏みにじってはならないという大前提があるんだけども）</p>
<p>弟が結婚して家を建て子をなす計画まで伝わってきている。
とても幸せそうだし、私もそうなりたい。</p>
<p>それを実現させているのはひとえに嫁さんの大企業安定パワーである。
私もそうなりたい。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="興味関心">興味・関心<a href="https://ningensei848.github.io/2023/02/01/#%E8%88%88%E5%91%B3%E9%96%A2%E5%BF%83" class="hash-link" aria-label="Direct link to 興味・関心" title="Direct link to 興味・関心">​</a></h2>
<p>プログラミングをやっていくものとして、最新の知見を追わなくなってはおしまいだと思う。
ので、現在惹かれているものを書き出してみる。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="react-18">React 18<a href="https://ningensei848.github.io/2023/02/01/#react-18" class="hash-link" aria-label="Direct link to React 18" title="Direct link to React 18">​</a></h3>
<p>まずはフロントエンドの王道をキャッチアップすべきだろう。</p>
<p><code>ErrorBoundary</code> だとか <code>Suspense</code> の挙動がいい感じになったと聞いている。</p>
<p>かなり書き方も違うはずなので、きちんとお行儀良くかけるようにしたい。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="backend-in-typescript">Backend in TypeScript<a href="https://ningensei848.github.io/2023/02/01/#backend-in-typescript" class="hash-link" aria-label="Direct link to Backend in TypeScript" title="Direct link to Backend in TypeScript">​</a></h3>
<p>お仕事で期待されているのは主に Python を用いたデータ分析だが、バックエンドの構築を担えるようになりたい。
分析で培った経験を活かすなら Django (Python 製の ORM) であろうが、静的型付けを活かせるような仕組みとしたい。</p>
<p>GraphQL や速度面を考慮しても、こちらに軍配があがるかもしれない（ここはまだ検討が浅いが）。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rust">Rust<a href="https://ningensei848.github.io/2023/02/01/#rust" class="hash-link" aria-label="Direct link to Rust" title="Direct link to Rust">​</a></h3>
<p>完全に趣味的な興味、もとい２０年先を見据えたときに必ず必要となるのが Rust lang だろう。
お仕事で使える機会は遠く尊いところにあるが、まずは一歩を踏み出さねば始まらない。</p>
<p>遠い先、とはいうもののフロントエンドの速度を求めてすぐにこれが到来する可能性も大いに有り得る。
突然面食らうよりは、まず敵情視察くらい（敵とか言っている時点でまだマインドがダメダメだが）やっておくべきだろう。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ml4keiba-with-gcp">ML4Keiba with GCP<a href="https://ningensei848.github.io/2023/02/01/#ml4keiba-with-gcp" class="hash-link" aria-label="Direct link to ML4Keiba with GCP" title="Direct link to ML4Keiba with GCP">​</a></h3>
<p>せっかくデータを集めているのだから、これをもっと大規模にやってサービス提供に転用できるようにしたい。
クラウドストレージをつかう ETL の基板設計の経験にもなるし、大規模データ分析を自前データでできるようになるかもしれない。
なにより、競馬という XX を自分の勘ではなくプログラムに基づいてやれるようになりたい。</p>
<p>暇な時間があるうちに優先的に取り組もう。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="総括">総括<a href="https://ningensei848.github.io/2023/02/01/#%E7%B7%8F%E6%8B%AC" class="hash-link" aria-label="Direct link to 総括" title="Direct link to 総括">​</a></h2>
<p>いろいろ考えることはあるしやることもある。
少しずつやる、着実にやる、真面目にやる。
これしかない。</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="日記" term="日記"/>
        <category label="blog" term="blog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ML4Keiba を具体的に考えていく]]></title>
        <id>https://ningensei848.github.io/2022/11/14/</id>
        <link href="https://ningensei848.github.io/2022/11/14/"/>
        <updated>2022-11-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前回までの記事では、 ML4Keiba の理想的な機能について考えた]]></summary>
        <content type="html"><![CDATA[<p><a href="https://ningensei848.github.io/2022/06/09" target="_blank" rel="noopener noreferrer">前回までの記事</a>では、 ML4Keiba の理想的な機能について考えた</p>
<p>今回は、具体的にどのようにデータを「状態」として保持するか・引き出すかを考える
（まぁつまり ETL ってやつだ）</p>
<p><img decoding="async" loading="lazy" src="https://img.icons8.com/glyph-neue/64/000000/horse.png" alt="glyph-neue-horse" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="db-の選定">DB の選定<a href="https://ningensei848.github.io/2022/11/14/#db-%E3%81%AE%E9%81%B8%E5%AE%9A" class="hash-link" aria-label="Direct link to DB の選定" title="Direct link to DB の選定">​</a></h2>
<p>思えばいままでずっとデータベースと触れ合うことを避けてきた</p>
<p>なるべく関数志向というか、「状態」に依存しないようにコードを書き、どうしても必要なときは状態管理フレームワークでよしなにしてもらうだけだった
（ちょっとズレるけども）</p>
<p>考慮すべきポイントは次の２つだ：</p>
<ol>
<li>ローカル環境でも使いやすい</li>
<li>クラウド側に手厚いサポートがある</li>
</ol>
<p>Docker なんかを利用して、個人開発スケールでも利用しやすいものであることは必要だろう</p>
<p>そして、これをそのままクラウドサービスにまかせても大丈夫な体制が整っていると移行コストがゼロになってだいぶ嬉しい</p>
<p>……という視点で考えたところ、やはり PostgreSQL を採用することになりそうだ</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="postgresql">PostgreSQL<a href="https://ningensei848.github.io/2022/11/14/#postgresql" class="hash-link" aria-label="Direct link to PostgreSQL" title="Direct link to PostgreSQL">​</a></h3>
<p>"postgresql docker" などのクエリで調べればわかるように、 Docker 環境における posgresql のサポートは手厚い</p>
<ul>
<li><a href="https://zenn.dev/re24_1986/articles/b76c3fd8f76aec" target="_blank" rel="noopener noreferrer">【Docker】postgresql の構築</a></li>
</ul>
<p>cf. <a href="https://hub.docker.com/_/postgres" target="_blank" rel="noopener noreferrer">https://hub.docker.com/_/postgres</a></p>
<p>また、 GUI から触れるようにツールも存在する（ありがてえ）</p>
<ul>
<li><a href="https://www.pgadmin.org/" target="_blank" rel="noopener noreferrer">pgAdmin - PostgreSQL Tools</a></li>
</ul>
<p>cf. <a href="https://hub.docker.com/r/dpage/pgadmin4/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/r/dpage/pgadmin4/</a></p>
<hr>
<p>次に、クラウドサービスについて：</p>
<p>前提として、今後 <a href="https://cloud.google.com/bigquery" target="_blank" rel="noopener noreferrer">BigQuery</a> を必要とする場面が増えるだろうことを考えて、事業者としては GCP を選択せざるを得ないと思っている
（AWS もいいが、２つを比較したときに敢えて AWS を選ぶ理由が私にはなかった）</p>
<p>で、その GCP が提供する「データベース」のサービスのうち、ニーズごとにおすすめされているのが以下のページである</p>
<p><a href="https://cloud.google.com/products/databases" target="_blank" rel="noopener noreferrer">https://cloud.google.com/products/databases</a></p>
<p>第一に候補として挙げられるのが <a href="https://cloud.google.com/sql/docs/postgres" target="_blank" rel="noopener noreferrer">Cloud SQL for PostgreSQL</a> だろう</p>
<p>もっとも手軽だし、信頼もある（と、思い込んでいる）</p>
<p>さらに、もっとスケールさせたいとかパフォーマンスが欲しくなった場合にも <a href="https://cloud.google.com/alloydb" target="_blank" rel="noopener noreferrer">PostgreSQL 向け AlloyDB</a> に乗り換えるという選択肢も取れる</p>
<p>もちろん、これら　 DB から　 BigQuery にデータをロードするのは容易い（はず？笑）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="db-の準備">DB の準備<a href="https://ningensei848.github.io/2022/11/14/#db-%E3%81%AE%E6%BA%96%E5%82%99" class="hash-link" aria-label="Direct link to DB の準備" title="Direct link to DB の準備">​</a></h2>
<p>PostgreSQL を使うことが確定したところで、どうやって手元のデータを読み込ませるのかということを考える</p>
<p>外部からデータを読み込ませる際に "\COPY" という独自のコマンドを使うようだ</p>
<p>cf. <a href="https://www.postgresql.jp/document/9.0/html/sql-copy.html" target="_blank" rel="noopener noreferrer">https://www.postgresql.jp/document/9.0/html/sql-copy.html</a></p>
<p>いちいちシェルコマンドでポチポチやっていくのは苦痛なので、 Python ですべてやらせてしまうことになる</p>
<p>で、もっとも良い選択肢と思われるのが <a href="https://www.psycopg.org/docs/usage.html#using-copy-to-and-copy-from" target="_blank" rel="noopener noreferrer"><code>psycopg</code></a> である</p>
<p>歴史もあるし、C のラッパーなので速度はそこそこ保証されているはずだ</p>
<p>特に、<a href="https://www.psycopg.org/docs/usage.html#using-copy-to-and-copy-from" target="_blank" rel="noopener noreferrer"><code>copy_from()</code></a> がサポートされているので、膨大なファイル群にも対応しやすいだろう</p>
<p>また、大量にロードする際に速度が著しく落ちる場合の対策も挙げられている
（加えて、まだよくわかっていないが「パイプライン機能」なるものをつかうとよりよいらしい？← クエリを絶え間なく送れるからと言う話かも）</p>
<p>cf. <a href="https://www.enterprisedb.com/blog/7-best-practice-tips-postgresql-bulk-data-loading" target="_blank" rel="noopener noreferrer">https://www.enterprisedb.com/blog/7-best-practice-tips-postgresql-bulk-data-loading</a></p>
<p>テーブル構造など、適宜考えなければならないっぽいことはあるが、とりあえず「状態」として DB を持つことができそうな筋道は立てられた</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="まとめ">まとめ<a href="https://ningensei848.github.io/2022/11/14/#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to まとめ" title="Direct link to まとめ">​</a></h2>
<ol>
<li>GCP 上の Cloud SQL for PostgreSQL (or Alloy DB) を採用する</li>
<li>↑ のために、PostgreSQL を採用する</li>
<li>Docker コンテナで立ててローカルで触ってみる</li>
<li>↑ 　には pgAdmin というツールが使える（もちろんクラウドにおいた場合にも使えるはず）</li>
<li>データのロードには <code>\COPY</code> を用いるが、 Python のライブラリ <code>psycopg</code> (C のラッパー)を採用するとよさそう</li>
<li>↑ <code>/data</code> ディレクトリ以下を探る python スクリプトを書いて、大量にロードできるようにしましょう</li>
</ol>
<p>こんな感じだろうか</p>
<p>おそらく速度面で色々改善があると思われるが、とりあえず今の段階では考えないことにする</p>
<p>ジャパンカップ、あるいは有馬記念までには予測をもとに勝馬投票券を購入できるようにしたい……！</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="ml4keiba" term="ml4keiba"/>
        <category label="python" term="python"/>
        <category label="競馬" term="競馬"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docusaurus v2.2 へ更新した]]></title>
        <id>https://ningensei848.github.io/2022/11/07/</id>
        <link href="https://ningensei848.github.io/2022/11/07/"/>
        <updated>2022-11-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[docusaurus keytar]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://docusaurus.io/img/docusaurus.svg" alt="docusaurus keytar" class="img_ev3q"></p>
<p>半年近く放置してしまったが、どうにかして本ブログの諸々を更新した</p>
<p>特に、<a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer"><code>docusaurus</code></a> を v2.2 まで上げられたのは快挙であろう</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="感想">感想<a href="https://ningensei848.github.io/2022/11/07/#%E6%84%9F%E6%83%B3" class="hash-link" aria-label="Direct link to 感想" title="Direct link to 感想">​</a></h2>
<p>思えば、 swizzling がうまく機能しなかったり（ theme 側の実装構造に破壊的変更があったのでしかたがない）、ESLint の flat-config を採用すると決めたり、なかなか骨が折れる仕事であった。。。</p>
<p><a href="https://github.com/facebook/docusaurus/tree/main/packages/docusaurus-theme-classic" target="_blank" rel="noopener noreferrer"><code>theme-classic</code></a> にはコンポネント構造が大幅に見直されており、カスタマイズするのがだいぶ楽になりそうだという印象を受けた</p>
<p>実際、これまでは諦めていた「ページネーションの向き」をあっさりと変更できるようになっていたので感激した
（これは蛇足だが、感覚的な議論として「時の流れは左 → 右」だよね？改装前では逆のまま変更不能だった）</p>
<p>さらに、<code>pre-commit</code> をきちんとやろうというふうに向き合うこともできた</p>
<p><a href="https://github.com/typicode/husky" target="_blank" rel="noopener noreferrer"><code>husky</code></a> やら <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener noreferrer"><code>lint-staged</code></a> が意味不明で手を付けられなかったが、なんてことはない nodejs で <code>pre-commit</code> やるならこういう構造だよね〜というのは再定義しただけだった</p>
<ul>
<li><code>husky</code> は <a href="https://pre-commit.com/" target="_blank" rel="noopener noreferrer">python の <code>pre-commit</code></a> よろしく、 hook を登録するためのツール</li>
<li><code>lint-staged</code> は、コミットされたファイルだけを対象に何らかのコマンドを実行するツール（？）<!-- -->
<ul>
<li>組み合わせることで真価を発揮する</li>
</ul>
</li>
</ul>
<p>Python + TypeScript みたいなプロジェクトであれば python でインストールできる <a href="https://pre-commit.com/" target="_blank" rel="noopener noreferrer">本家 <code>pre-commit</code></a> を利用したほうがいいだろうが、それはそれ、これはこれという使い分けをきちんと認識できたのは幸いである</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="課題">課題<a href="https://ningensei848.github.io/2022/11/07/#%E8%AA%B2%E9%A1%8C" class="hash-link" aria-label="Direct link to 課題" title="Direct link to 課題">​</a></h2>
<p>対照的に、<code>Codespace</code> の <code>devcontainer.json</code> よくわからん……（し、手を付けたくない）という病も発症してしまった</p>
<p>cf. <a href="https://docs.github.com/ja/codespaces/setting-up-your-project-for-codespaces/introduction-to-dev-containers" target="_blank" rel="noopener noreferrer">https://docs.github.com/ja/codespaces/setting-up-your-project-for-codespaces/introduction-to-dev-containers</a></p>
<p>またも port forwarding に苦しめられてしまい、何もしていないときの「すべてを先回りしてなにかやってくれている感じ」が快適すぎて抜けられない</p>
<p>さらに、これは自身の問題ではないが、<a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer"><code>MDX</code></a> が v1.x 系のまま残っている</p>
<p>本来であれば v2 系に乗り換えて高速化を図るところだが、開発チームが苦戦しているようだ</p>
<p>どういう手助けができるかわからないが、remark/rehype を自分で触れてプラグインに親しんでおくことは、心強い糧となるだろう</p>
<p>プラグインで思い出したが、<code>injectHeadTag.ts</code> に含まれる <code>async</code> 関数が await しないなら不要じゃないかという指摘が ESLint から上がっていた</p>
<p>確認する労力を惜しんで ignore してしまったが、こちらはなにか影響があるだろうか……？</p>
<hr>
<p>最後に、今回も <a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer"><code>jest</code></a> のような　テストツールに触れることはできなかった</p>
<p>Python 側では pytest を使うようになったし、これでテスト駆動開発のなんたるかが少しはわかったきがしたのだが、いざテストを書くまでの下準備がどうしても果てしなく遠く感じられてしまい億劫だ。。。</p>
<p><a href="https://reactjs.org/versions" target="_blank" rel="noopener noreferrer">React も v18 が本格的に到来</a>したり、<a href="https://nextjs.org/" target="_blank" rel="noopener noreferrer">Next.js</a> は相変わらず<a href="https://nextjs.org/blog/next-13" target="_blank" rel="noopener noreferrer">爆速ルートを邁進している</a>ようなので、どうにかしてキャッチアップすべく、なんらかのフロントエンドアプリでもつくる機運が高まるなぁ（まだ手を出せる時期にないが）</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="blog" term="blog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tweet を不特定多数の人々"を利用して"集めたい]]></title>
        <id>https://ningensei848.github.io/2022/06/17/</id>
        <link href="https://ningensei848.github.io/2022/06/17/"/>
        <updated>2022-06-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[「～を利用して」という表現には「個々人に "集めさせる"」という意図がある。]]></summary>
        <content type="html"><![CDATA[<p>「～を利用して」という表現には「個々人に "集めさせる"」という意図がある。
すなわち、Twitter API を個人で利用する分にはたかだか５０万 tw/month 程度までしか収集できない一方で、複数人の力を合わせればその量を N 倍に増やせるという企みである。</p>
<p>じゃあ、どうやってそれを実現するのか？ということを考えているので、それをメモしておく。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="手順">手順<a href="https://ningensei848.github.io/2022/06/17/#%E6%89%8B%E9%A0%86" class="hash-link" aria-label="Direct link to 手順" title="Direct link to 手順">​</a></h2>
<ol>
<li>ツイート収集メソッドの確立</li>
<li>収集動機の言語化</li>
<li>データを分析できるツールの開発</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ツイート収集メソッド">ツイート収集メソッド<a href="https://ningensei848.github.io/2022/06/17/#%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E5%8F%8E%E9%9B%86%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89" class="hash-link" aria-label="Direct link to ツイート収集メソッド" title="Direct link to ツイート収集メソッド">​</a></h2>
<p><strong>素人でもツイートを集められる方法を確立する</strong></p>
<p>まず自分のツイートを利用して「ツイート収集ツール」の公開リポジトリを用意する。
これは、対象の user_id を列挙しておけば定期的にスクリプトが走ってツイートを保存するというものだ。</p>
<p>あとは GitHub アカウントの作成からリポジトリのクローン、user_id の編集、リポジトリの private 化、 Actions の有効化……等々のインストラクションを記事にして共有すれば、誰でもツイートを集めうる。</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p><strong>リポジトリの private 化</strong> は必須である。
なぜなら著作権的に怒られる可能性が高いからだ。</p><p>例として挙げる自分のリポジトリについては、著作権の放棄を明記するか、対象のデータを明示的に削除できるスクリプトもオプションでつけておくべきだろう。</p></div></div>
<p>また、エディタを持たない一般の素人には、ファイル編集でさえも億劫となるかもしれない問題がある。
こちらは、GitHub がブラウザ上で提供するエディタでファイル一つだけを編集できるようにすればよいと思われる。
初見では戸惑うであろう <code>git add</code> <code>git commit</code> 等の操作を省略できるのも好材料だろう。</p>
<p>こういった一つ一つのアプローチについて、<a href="https://zenn.dev/ningensei848" target="_blank" rel="noopener noreferrer">zenn</a> なり <a href="https://note.com/ningensei848" target="_blank" rel="noopener noreferrer">note</a> なりに手順を事細かに述べておくとよい。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="動機の言語化">動機の言語化<a href="https://ningensei848.github.io/2022/06/17/#%E5%8B%95%E6%A9%9F%E3%81%AE%E8%A8%80%E8%AA%9E%E5%8C%96" class="hash-link" aria-label="Direct link to 動機の言語化" title="Direct link to 動機の言語化">​</a></h2>
<p><strong>集めたいと思わせる動機を言語化して認知させる</strong></p>
<p>ツイートを集められる状況が整ったとして、それをどう使うのかという点が明らかではないと行動へ移しづらいだろう。
プログラミングやデータ分析など考えたこともない一般人であればなおさらである。</p>
<p>例えば、訴訟での証拠としてツイートが採用されることがあるが、単なるスクショよりも信頼性の高いデータを得ることができる。
本文はもとより、ツイートされた日時、それを取得した日時、その時点での RT 数等も取得できる。</p>
<p><a href="https://megalodon.jp/" target="_blank" rel="noopener noreferrer">Web 魚拓</a>等の外部サービスとは異なり、自分だけが届く範囲にデータを置くことで意図せず削除される心配がない。
ツイ消しの憂き目に会っても、自分だけは生データを持っているというアドバンテージを得られる。</p>
<p>また、API の制限こそあれど、その範囲内であれば複数のアカウントに対してツイートを取得することができる（一人に対して１リポジトリといった運用を避けられる）。
加えて、「いいねしたツイート」も並行して集めることができる。</p>
<p>さらに、次の述べるような分析ツールに丸々データを投げ込むことで、データを可視化することができるかもしれない。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="分析ツールの開発">分析ツールの開発<a href="https://ningensei848.github.io/2022/06/17/#%E5%88%86%E6%9E%90%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E9%96%8B%E7%99%BA" class="hash-link" aria-label="Direct link to 分析ツールの開発" title="Direct link to 分析ツールの開発">​</a></h2>
<p><strong>集めたツイートを分析できるツールを設置する</strong></p>
<p>検索はもとより、ワードクラウドで頻出単語群を見やすくしたり、リプライを交わす仲の良いアカウントが誰なのか人目でわかるようにしたり、いいねしがちなツイートの傾向を探ったりできる。
本来であれば自分のアカウントで連携サービスに許可を出した上で自分のアカウントに対してしか実行できなかった操作を、他人についてもできるとなればかなり魅力的ではないだろうか。</p>
<p>……といったところで、規約的な問題が発生しそうなことにも気がついた。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="懸念シェアしたい">懸念：シェアしたい<a href="https://ningensei848.github.io/2022/06/17/#%E6%87%B8%E5%BF%B5%E3%82%B7%E3%82%A7%E3%82%A2%E3%81%97%E3%81%9F%E3%81%84" class="hash-link" aria-label="Direct link to 懸念：シェアしたい" title="Direct link to 懸念：シェアしたい">​</a></h3>
<p>「結果をシェアしたい！」という要望が多く生まれると想定されるが、1⃣ 他人のデータを勝手に抜いて 2⃣ 分析ツールに突っ込み 3⃣ 結果を広く公衆に掲示する　という場合、どこかでなにかしら引っかかりそうだ。</p>
<p>現状の感覚として、1⃣2⃣ は問題なく行えそうだが、3⃣ については Twitter 側の規約に違反していそうな気がする。</p>
<p>一方で、あくまで二次的なデータだけであれば、そこについてツイート主体が権利侵害を訴えることはできない（なんの権利も侵害していないため）。</p>
<p>既存のツイートデータ分析ツールは「自分のツイート」に対して、連携サービスに許可を出した上で分析させるものであって、ツイートした主体が異なる場合はどうなるのか不明である。
この「許可を出す」のは、API 経由でツイートを取得するためだけということであれば、権利主体が異なっても特段問題はないのだろうか…</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="まとめ">まとめ<a href="https://ningensei848.github.io/2022/06/17/#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to まとめ" title="Direct link to まとめ">​</a></h2>
<p>３つの手順をこなして、実際に分析ツールを使ってくれるようになれば、<strong>そのバックエンドでは不定期にデータが蓄積されていく</strong>。</p>
<ul>
<li>サービスの提供者は API 制限を気にすることなくツイートを集めることができる</li>
<li>サービスの受益者は手元にあるツイートを手軽に分析して付加価値を得られる</li>
</ul>
<p>両者 win-win であるといえよう。</p>
<p>問題があるとすれば、知らず知らずのうちにデータを取得されたターゲットだが、ここまで特段の権利は侵害していないはずだし、Twitter 社の規約にも従っているはずだ。
ソーシャルシェア機能をつけると問題になるかもしれないが、こちらにも抜け道がある気がしないでもない。</p>
<p>アイデアは形になってこそ価値があるので、誰かに真似される前に実行に移したいなぁ（夏終わるまでにやりたいね）</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="Twitter" term="Twitter"/>
        <category label="hcomp" term="hcomp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ML4Keiba の展望]]></title>
        <id>https://ningensei848.github.io/2022/06/09/</id>
        <link href="https://ningensei848.github.io/2022/06/09/"/>
        <updated>2022-06-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ML4Keiba としてデータを集めるのはいいが、その後についてきちんと考えをまとめていなかった。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/Ningensei848/ML4Keiba" target="_blank" rel="noopener noreferrer">ML4Keiba</a> としてデータを集めるのはいいが、その後についてきちんと考えをまとめていなかった。
マイルストーンというほど定かではないが、現在考えているいろいろなことをメモとして残す。</p>
<p>What までは書いてあるが、実際の具体的な How については自分の頭の中にあるだけだ。
これもどこかきちんと出力しておきたいが……また別の問題が生じるかもしれないので、後々考えることにする。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="内容">内容<a href="https://ningensei848.github.io/2022/06/09/#%E5%86%85%E5%AE%B9" class="hash-link" aria-label="Direct link to 内容" title="Direct link to 内容">​</a></h2>
<ul>
<li>各種レーティング<!-- -->
<ul>
<li>血統</li>
<li>騎手成績</li>
<li>厩舎成績</li>
</ul>
</li>
<li>コース内外の有利・不利</li>
<li>脚質推定</li>
<li>例外処理<!-- -->
<ul>
<li>海外レース</li>
<li>同着・降着</li>
<li>その他アクシデント</li>
</ul>
</li>
<li>学習モデルの更新頻度</li>
<li>各データを比較したときの順位づけアルゴリズム</li>
<li>パフォーマンスによる変動幅推定</li>
<li>体重による結果の変化</li>
<li>サービスとしてローンチする前に</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="レーティング">レーティング<a href="https://ningensei848.github.io/2022/06/09/#%E3%83%AC%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0" class="hash-link" aria-label="Direct link to レーティング" title="Direct link to レーティング">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="馬の血統">馬の血統<a href="https://ningensei848.github.io/2022/06/09/#%E9%A6%AC%E3%81%AE%E8%A1%80%E7%B5%B1" class="hash-link" aria-label="Direct link to 馬の血統" title="Direct link to 馬の血統">​</a></h3>
<p>馬ごとの血統については、どの馬についても確実に情報が存在しているし、時間が経っても変化しない。
レーティングの算出方法についてはいくつかやり方があるだろうが、おそらく良さそうな先例があるはずなのでそれを採用するべき（未だ詳しく調べていない）。</p>
<p>このレーティングさえあれば、新馬戦はもとよりその他のレースでも基礎基本となる議論が展開しうる。</p>
<p>Sire / BMS についても考慮し始めると重み付けに難航する予感がしている。
精度を高めるのは後だと割り切り、まずは各々の算出からはじめる。</p>
<p>最初から完璧なものを作ろうとすると挫折しがちなので、まずは深く考えず親の競走成績で比較する程度でよいだろう。
ちょっとずつ工夫できそうなところを増やしていくことを心がけたい。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="騎手成績">騎手成績<a href="https://ningensei848.github.io/2022/06/09/#%E9%A8%8E%E6%89%8B%E6%88%90%E7%B8%BE" class="hash-link" aria-label="Direct link to 騎手成績" title="Direct link to 騎手成績">​</a></h3>
<p>各騎手には各々レース結果があるので、そこから統計値が出せるはず。
初年度の新人騎手については 1⃣ 考慮に入れない 2⃣ レースに参加する騎手のうち、相対的な位置に置いて考える　などがあろう。
ある程度経験してみないとわからないということもあり、複数年度の騎乗経験に達するまではレーティング不問とする程度がいいかもしれない</p>
<p>個人の力量ではなく、斤量による有利不利を可視化できるだけでもありがたいかも</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="厩舎成績">厩舎成績<a href="https://ningensei848.github.io/2022/06/09/#%E5%8E%A9%E8%88%8E%E6%88%90%E7%B8%BE" class="hash-link" aria-label="Direct link to 厩舎成績" title="Direct link to 厩舎成績">​</a></h3>
<p>所属によっては、出走傾向とか成績に偏りがあるものと思われる。
（私が知っているものだと、メジロ牧場の馬は天皇賞絶対主義だったとかそういう話）</p>
<p>あまり重要なデータとも思えないが、精度を高めるピースにはなりうるかもしれない。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="内外の有利不利と脚質">内外の有利不利と脚質<a href="https://ningensei848.github.io/2022/06/09/#%E5%86%85%E5%A4%96%E3%81%AE%E6%9C%89%E5%88%A9%E4%B8%8D%E5%88%A9%E3%81%A8%E8%84%9A%E8%B3%AA" class="hash-link" aria-label="Direct link to 内外の有利不利と脚質" title="Direct link to 内外の有利不利と脚質">​</a></h2>
<p>レースごとの統計値、騎手ごとの統計値は出せるはず。
過去１０年では内枠外枠それぞれどのくらいの勝率なのか？がわかるだけでかなり傾向は絞れるだろう。</p>
<p>ここに脚質推定が加わることで、展開予想にも通じうる。
例えば内枠が勝ちまくっているのは、単に短い距離を走ることになるからスタミナ勝負担っているという話なのか、それとも逃げ馬ばかりが抜け出しやすかったからなのかとか……
コースごとの傾向が抽出できると、かなり大きな検討材料となりうるだろう。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="例外処理">例外処理<a href="https://ningensei848.github.io/2022/06/09/#%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86" class="hash-link" aria-label="Direct link to 例外処理" title="Direct link to 例外処理">​</a></h2>
<p>同着や海外レース出走など、過去のデータがうまく正規化されない場合の対処を検討せねばならない。
現在のデータ収集スクリプトだと、その辺がうまく処理できていない疑惑がある。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="学習モデルの更新頻度">学習モデルの更新頻度<a href="https://ningensei848.github.io/2022/06/09/#%E5%AD%A6%E7%BF%92%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E6%9B%B4%E6%96%B0%E9%A0%BB%E5%BA%A6" class="hash-link" aria-label="Direct link to 学習モデルの更新頻度" title="Direct link to 学習モデルの更新頻度">​</a></h2>
<p>やがては上記までの情報をモデリングして入力、ということが起こるのだろうが、そのモデルは逐次更新する必要があるかもしれない。</p>
<p>例えば、入力値に「出走馬とその枠、騎手、馬体重」を入れたい場合、前走までのデータも学習してある必要がある。
もしそうでなければ、出された予測が必ずしも正しいとはいえないだろう。
しかし、これだと週一ないし毎日モデル更新せねばならないかもしれない。
そうなるとリソース的にも危ういし、そもそも時間が足りなくなるかもしれない。</p>
<p>上記の入力に加えて、近走最大 4 走のデータも受け付けるようにすれば、少しは改善するかも？
言い換えれば、５走以上前のデータで学習して、直近４走のデータを入力として算出させる。
こういうアプローチなら、更新頻度が月一程度に抑えられそうな気がする。</p>
<p>といいつつ、この辺のメタな話は全然経験がないなのでテキトー漕いてる可能性が高い。
参考にはしないように………</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="各データを比較したときの順位づけアルゴリズム">各データを比較したときの順位づけアルゴリズム<a href="https://ningensei848.github.io/2022/06/09/#%E5%90%84%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%AF%94%E8%BC%83%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E9%A0%86%E4%BD%8D%E3%81%A5%E3%81%91%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" class="hash-link" aria-label="Direct link to 各データを比較したときの順位づけアルゴリズム" title="Direct link to 各データを比較したときの順位づけアルゴリズム">​</a></h2>
<p>モデルで機械学習云々よりも、まずは個々の統計データやレーティングが出せれば、その都度有利不利を算出することができそう。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="パフォー�マンスによる変動幅推定">パフォーマンスによる変動幅推定<a href="https://ningensei848.github.io/2022/06/09/#%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E5%A4%89%E5%8B%95%E5%B9%85%E6%8E%A8%E5%AE%9A" class="hash-link" aria-label="Direct link to パフォーマンスによる変動幅推定" title="Direct link to パフォーマンスによる変動幅推定">​</a></h2>
<p>馬が本来の力を発揮できたか否かによって順位は変わるはず。
絶好調ならここまで、絶不調でも最低ここまで、という目安は需要ありそう。</p>
<p>うまく行ければ一着、もしだめでも３着という馬がいれば、買い目はかなり変わってくるだろう。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="体重による結果の変化">体重による結果の変化<a href="https://ningensei848.github.io/2022/06/09/#%E4%BD%93%E9%87%8D%E3%81%AB%E3%82%88%E3%82%8B%E7%B5%90%E6%9E%9C%E3%81%AE%E5%A4%89%E5%8C%96" class="hash-link" aria-label="Direct link to 体重による結果の変化" title="Direct link to 体重による結果の変化">​</a></h2>
<p>インタラクティブにやるべきものとして、前走と体重が同じ場合と比較してどのように結果が変動するのか？を知りたい。
(馬体重は直前にしか知ることができない、事前にシミュレーションできるツールは現時点ではなさそう)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="サービスとしてローンチする前に">サービスとしてローンチする前に<a href="https://ningensei848.github.io/2022/06/09/#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A8%E3%81%97%E3%81%A6%E3%83%AD%E3%83%BC%E3%83%B3%E3%83%81%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB" class="hash-link" aria-label="Direct link to サービスとしてローンチする前に" title="Direct link to サービスとしてローンチする前に">​</a></h2>
<p>note 等で予想を書いてメインレースだけ課金させるというのが良さそう。</p>
<p>それまでの予想は課金するかどうか検討材料として提供する。
そこでお金が集まればサービスとしてやれる確信になるし、ダメそうなら撤退する選択肢が取れる。</p>
<p>→ 　リスクを測る装置として取り組むのが良さそう</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="まとめ">まとめ<a href="https://ningensei848.github.io/2022/06/09/#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to まとめ" title="Direct link to まとめ">​</a></h2>
<p>現状の考えをまとめた。</p>
<p>なにはともあれ、レーティング算出から始めてみて、それをもとに予想する記事を note なりで書いてみて、実際にどのくらいイケるか試すのがいいだろう。</p>
<p>あたってくだけつつ、試行錯誤を繰り返すしかない……！</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="ml4keiba" term="ml4keiba"/>
        <category label="python" term="python"/>
        <category label="競馬" term="競馬"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Codespaces やっべぇんですの！というご報告]]></title>
        <id>https://ningensei848.github.io/2022/06/08/</id>
        <link href="https://ningensei848.github.io/2022/06/08/"/>
        <updated>2022-06-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[３月末に申請していた "GitHub Codespaces" のベータ版が今月初旬に到来していた。]]></summary>
        <content type="html"><![CDATA[<p>３月末に申請していた "GitHub Codespaces" のベータ版が今月初旬に到来していた。
<a href="https://ningensei848.github.io/2022/04/01">4 月の冒頭</a>で苦労していたことが嘘のように解決してしまい、今後も手放せないプロダクトとなりそうな予感がある。</p>
<p>早速使ってみた感想を述べる。</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>追記 2022/06/10 13:15</div><div class="admonitionContent_BuS1"><p>ブラウザ上で色々とやっている関係で、ウラで JS が頑張っている事情がある。
これを AdBlock 等で止めてしまうと、うまくページが表示されない。</p><p><strong><code>github.dev</code> や <code>githubpreview.dev</code> に対してはブロックを実行しない設定に変更する</strong>ことで、JS の邪魔をせずページを表示させることができた。</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="すげぇポイントのまとめ">すげぇポイントのまとめ<a href="https://ningensei848.github.io/2022/06/08/#%E3%81%99%E3%81%92%E3%81%87%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to すげぇポイントのまとめ" title="Direct link to すげぇポイントのまとめ">​</a></h2>
<ul>
<li>port 開放を検出して自動でフォワーディング</li>
<li>ローカルブラウザのキャッシュではなく、リモートサーバ側に作業記録が残る</li>
</ul>
<p>痒いところに手が届かなかった <a href="https://vscode.dev/" target="_blank" rel="noopener noreferrer">vscode.dev</a> から一転、これらの問題を解決できたことでほぼ VSCode 同然の使い心地となった。</p>
<p>今後リソース調節が可能になれば、単なるデスクトップ版よりもずっと素晴らしいものになるだろう。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前提codespaces-ってなに">前提：codespaces ってなに？<a href="https://ningensei848.github.io/2022/06/08/#%E5%89%8D%E6%8F%90codespaces-%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%AB" class="hash-link" aria-label="Direct link to 前提：codespaces ってなに？" title="Direct link to 前提：codespaces ってなに？">​</a></h2>
<iframe width="356" height="200" src="https://www.youtube.com/embed/j5VQ8OlwbqI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" title="Welcome to Codespaces - GitHub Universe 2020"></iframe>
<blockquote>
<p><strong>短時間で構築できる開発環境</strong></p>
<p>GitHub から離れることなく、Visual Studio Code を利用できます。</p>
<p>Let's join ! ------&gt; <a href="https://github.co.jp/features/codespaces" target="_blank" rel="noopener noreferrer">GitHub Codespaces Official Page</a></p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="雑な感想">雑な感想<a href="https://ningensei848.github.io/2022/06/08/#%E9%9B%91%E3%81%AA%E6%84%9F%E6%83%B3" class="hash-link" aria-label="Direct link to 雑な感想" title="Direct link to 雑な感想">​</a></h2>
<p>まだ全然カスタムしていないのだが、ほぼ VSCode そのものと言っていい使い心地である。
Chrome 等のブラウザから利用する制約上、多少はショートカットキーが被って意図しない操作をすることがあるが、入力に違和感はないしターミナルも使える。
なんの文句もないだろう。</p>
<p>でもフロント開発をやろうとしたときに、ローカルサーバ立ててポート開けるのは無理よな～～～～と思いつつ何気なく起動してみたところ、なんと特段設定することなくポートフォワーディングを実施してアクセスできた（は？）</p>
<p>codespaces と同様の発想でコミュニティ主導で開発が進められていた <a href="https://github.com/coder/code-server" target="_blank" rel="noopener noreferrer">code-server</a> においては、ngrok 等の様々な workaround (つまり迂回策)を通じてリモートサーバ上に立てたローカルサーバにフォワーディングしていた（らしい）。
言うまでもなく色々知識と作業が必要で心理的障壁があった印象なのだが、codespaces ではそんなもの一切考えなくてもよい仕組みが整っていた（まじでどういう実装なんや？？？？）</p>
<p><img decoding="async" loading="lazy" alt="現在開けているポートに関する、右下にホップした通知" src="https://ningensei848.github.io/assets/images/codespaces_portforwarding-e59be5d66f39a032185bfe285c8a757f.png" width="473" height="165" class="img_ev3q"></p>
<p>codespaces とは別に、直接 repository を開いて編集できる vscode.dev という仕組みがすでにあり、こちらは申請しなくとも GitHub ユーザであれば誰でも利用可能である。
ただし、こちらにはそれなりの制約もある。
例えば、一時的にファイル編集ができるというだけなので、「コミットした」という状態を保持できない。
すなわち、コミットしたらすぐプッシュという運用になる（コミット自体はできるものの、それの取り消しやら種々の git 操作に制約がある）</p>
<p>この問題についても、 codespaces は解決している。
ブラウザのみで完結するのではなく、一度 space を create すると、その作業記録がリモートサーバ側に保存されるからだ。
いまはまだ無料で使えているものの、この「状態の保存」はサーバリソースを専有してしまうことになるため、近い将来には課金する必要が出てくるかもしれないと思った。</p>
<p>拡張機能について、 vscode.dev では機能しなかったものについても、codespaces では 通常の VSCode と同様に使うことができるようだ。
上述してきたように、ブラウザだけではなく、サーバの実行環境にも触れるからだと思われる。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="不満な点勘違い疑惑も含む">不満な点（勘違い疑惑も含む）<a href="https://ningensei848.github.io/2022/06/08/#%E4%B8%8D%E6%BA%80%E3%81%AA%E7%82%B9%E5%8B%98%E9%81%95%E3%81%84%E7%96%91%E6%83%91%E3%82%82%E5%90%AB%E3%82%80" class="hash-link" aria-label="Direct link to 不満な点（勘違い疑惑も含む）" title="Direct link to 不満な点（勘違い疑惑も含む）">​</a></h2>
<p><del>例えばマークダウンで記事を書いたときに、その変更を反映する HMR がうまく機能していない気がする（要検討）</del></p>
<p><del>ターミナル側では爆速でコンパイルしてくれている感じがするのだが、一方でフォワーディングしたブラウザからはうまく見えなかった。</del></p>
<p><del>これについては、技術云々と言うより筆者の環境の問題な可能性もある。</del></p>
<p>ローカルでサーバを動かしているときは、サーバ側でコンテンツの変更を検知してリロードをかけていた（？）のだが、ポートフォワーディングではそこまで面倒は見てくれないため、逐次手動でページ更新する必要がある。
また、ポート番号は同じでも、サーバを起動するたびにフォワーディングした URL は別物として再設定される仕組みなようだ。</p>
<p>（「うまく機能していない気がする」と感じたのは、開発サーバを再起動してしまいページが変わっていたから）</p>
<p>流石にこの問題はフォワーディングされているリモートサーバの側からどうこうできそうにないため、適宜手動でやっていくか、定期的にページ更新をかけるスクリプトやら拡張機能やらをローカルに仕込むしかないだろう。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="展望">展望<a href="https://ningensei848.github.io/2022/06/08/#%E5%B1%95%E6%9C%9B" class="hash-link" aria-label="Direct link to 展望" title="Direct link to 展望">​</a></h2>
<p><img decoding="async" loading="lazy" alt="codespaces のマシンタイプ指定" src="https://ningensei848.github.io/assets/images/change_codespace_machine_type-d87c3d249991b6167607a44f682d285f.png" width="661" height="332" class="img_ev3q"></p>
<p>現在、利用できるマシンスペックとしては「4 core / 8 GB メモリ / 32 GB ストレージ」という一種類で固定されていた。</p>
<p>これが無料で使えるというのもだいぶ豪華であるが、目的によってはストレージが不足していたり、もっとメモリが使いたいという要望は出てくるだろう。
このあたりの微調整ができるようになるというのは、きっと素晴らしい未来への大きな一歩だと思う。</p>
<hr>
<p>個人が端末を選ばずにプログラミングできるようになることはもとより、チームでの開発がものすごく加速されるんだろうな～～～という直感を得た。
すでに GitHub Teams や Enterprise では採用されているところもあるらしいが、こんなん反則やろ！！！！！！というツッコミが身をもって体感できた。</p>
<p>古くからあるエディタ論争に終止符が打たれ、世の中の開発者の共通環境として VSCode が覇権を取る日もそう遠くないのだろう……</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="日記" term="日記"/>
        <category label="GitHub" term="GitHub"/>
        <category label="Codespaces" term="Codespaces"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Twitter API v2 (Elevated) はいいけどよくないという話]]></title>
        <id>https://ningensei848.github.io/2022/05/15/</id>
        <link href="https://ningensei848.github.io/2022/05/15/"/>
        <updated>2022-05-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[故あって Twitter API を利用してデータを取得している。]]></summary>
        <content type="html"><![CDATA[<p>故あって Twitter API を利用してデータを取得している。
netkeiba.com をスクレイピングするときのように、"餅から米を得る" みたいなことはしなくて済むのがありがたい。
ドキュメントも整理されており文句は無い……と言いたいが、痒いところに手が届かなかったので、その愚痴を纏める。</p>
<p>なお、本記事では<a href="https://developer.twitter.com/en/docs/twitter-api" target="_blank" rel="noopener noreferrer">公式のドキュメント</a>以上の新しい情報は無い。
本当に使ってみた感想と、今後に期待する要望、それと少しの workaround があるかも〜程度である。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="良いところ">良いところ<a href="https://ningensei848.github.io/2022/05/15/#%E8%89%AF%E3%81%84%E3%81%A8%E3%81%93%E3%82%8D" class="hash-link" aria-label="Direct link to 良いところ" title="Direct link to 良いところ">​</a></h2>
<p>いつのまにか発表されていつのまにか標準になっていた Twitter Developper API v2 だが、 v1.1 と比べて何がどうなったのか？</p>
<p>最も実感しやすいのが、レスポンスのスリム化だと感じた。
v1.1 では、不要な情報も全て JSON でドバッと返ってきた。
特に仕様を知らなくてもトークンさえ与えれば良い感じのデータを得られるので利用者側としては万々歳だが、データを捌くサーバ側からすると不必要な負担が増えこそすれ減らないという状況があったようだ。</p>
<p>v2 からは、リクエストに必要な最低限の情報を渡すと、本当に最低限のデータしか返ってこない。
例えば <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent" target="_blank" rel="noopener noreferrer"><code>/2/tweets/search/recent</code></a> では、パラメタとして指定すべきは <code>query</code> だけである。
これに対して返ってくるのは、以下のような JSON データだ。</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>実際のレスポンスデータ</summary><div><div class="collapsibleContent_i85q"><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "data": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": "1373001119480344583",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "text": "Looking to get started with the Twitter API but new to APIs in general? @jessicagarson will walk you through everything you need to know in APIs 101 session. She’ll use examples using our v2 endpoints, Tuesday, March 23rd at 1 pm EST.nnJoin us on Twitchnhttps://t.co/GrtBOXyHmB"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": "1372627771717869568",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "text": "Thanks to everyone who joined and made today a great session! 🙌 nnIf weren't able to attend, we've got you covered. Academic researchers can now sign up for office hours for help using the new product track. See how you can sign up, here 👇nhttps://t.co/duIkd27lPx https://t.co/AP9YY4F8FG"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": "1367519323925843968",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "text": "Meet Aviary, a modern client for iOS 14 built using the new Twitter API. It has a beautiful UI and great widgets to keep you up to date with the latest Tweets. https://t.co/95cbd253jK"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": "1366832168333234177",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "text": "The new #TwitterAPI provides the ability to build the Tweet payload with the fields that you want. nnIn this tutorial @suhemparack explains how to build the new Tweet payload and how it compares with the old Tweet payload in v1.1 👇 https://t.co/eQZulq4Ik3"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": "1364984313154916352",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "text": "“I was heading to a design conference in New York and wanted to meet new people,” recalls @aaronykng, creator of @flocknet. “There wasn't an easy way to see all of the designers in my network, so I built one.” Making things like this opened the doors for him to the tech industry."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": "1364275610764201984",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "text": "If you're newly approved for the Academic Research product track, our next stream is for you.nnThis Thursday, February 25th at 10AM PST @suhemparack will demo how academics can use this track to get started with the new #TwitterAPInnJoin us on Twitch! 👀nhttps://t.co/SQziibOD9P"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "meta": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "newest_id": "1373001119480344583",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "oldest_id": "1364275610764201984",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "result_count": 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<p>v1.1 でくっついていた様々なメタ情報が悉くスリム化されていることで、見やすいし読みやすい。</p>
<p>これだけじゃあ情報量少なすぎるという指摘はもっともだが、これは各種パラメータをどんどん増やすことで解決する。
必要な属性といらない属性をリクエスト時点で決められるというのが、利用者としても管理者としても都合のいい落とし所であると思った。</p>
<p>そして何よりドキュメントがきちんと整えられているのが好印象を残す。
無論最初は dev portal だの OAuth 2.0 だの Bearer Token だのよくわからん……という壁があったが、実は単に英語を読めていないだけというオチが待ち受けている（のできちんとじっくり読んでみよう）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="よくない点">よくない点<a href="https://ningensei848.github.io/2022/05/15/#%E3%82%88%E3%81%8F%E3%81%AA%E3%81%84%E7%82%B9" class="hash-link" aria-label="Direct link to よくない点" title="Direct link to よ��くない点">​</a></h2>
<p>これは燦然と輝く大きなクソが一つある。</p>
<p><strong>ツイート検索を API から行なうと、直近 3200 件までしか遡れない</strong></p>
<p>これは Essential であろうと Elevated Standard であろうと同様である。
じゃあ Academic Research は……とおもったらこちらもまだダメであるらしい（？）</p>
<p>cf. <a href="https://twittercommunity.com/t/tweet-limit-at-3200/156391/4" target="_blank" rel="noopener noreferrer">https://twittercommunity.com/t/tweet-limit-at-3200/156391/4</a></p>
<p>上述した <code>/2/tweets/search</code> というエンドポイントから提供されうる上限がそこにあるということだろうか</p>
<p>ただし、 Academic Research であればどれだけ過去であっても「クエリを工夫すれば」アクセスすることは出来るようだ。
<code>until:YYYY-MM-DD since:YYYY-MM-DD</code> をいちいちつけなきゃいけね〜ってのが、いまの API v2 のつれぇとこだよな〜〜</p>
<hr>
<p>時点でクソなのは、 <a href="https://developer.twitter.com/en/docs/twitter-api/tweet-caps" target="_blank" rel="noopener noreferrer">Tweet caps</a> の存在である。
これは、一ヶ月あたりのツイート取得上限をさす。</p>
<p>Essential だと 500 K = 五十万ツイート　である。
Elevated だとこれが 200 万、 Academic だと 1000 万まで緩和されるが、timeline だけでなく Like を探る場合でも枠が消費されてしまうらしい。</p>
<p>API を何らかのアプリに載せて手動でチマチマデータを得るだけなら十分に余裕のある数値だ。
しかし、 Rate Limit ギリギリを攻めながら膨大なデータを取得しようとする場合には、下手すれば 3~5 日程度で枠を使い切ってしまう。</p>
<p>今回は、必要なデータを試算したときにこの容量上限問題にぶち当たってしまった。
はちゃめちゃに大量のデータを取得しうるところまでは良いとして、実際にそれを集めようとすると無理なの悲しすぎる……</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="まとめ">まとめ<a href="https://ningensei848.github.io/2022/05/15/#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to まとめ" title="Direct link to まとめ">​</a></h2>
<p>っていうこの悩みも実は金を出せば解決できる可能性は高い。</p>
<p>Elevated であれ Academic であれ、すべて無償で提供されている API を活用しようとしたときに制限と戦うことになるわけだ。</p>
<p>Twitter が提供するビッグなデータで勝負したいと腹を決めたのなら、なんとかして課金するのも一つの手なのかもしれない。</p>
<p>ってなわけで、明日はどうすれば課金アクセスできるのか調べんとな……コストの見積もり出して算盤弾けてこそ、きちんとした価値ある社会人だと思うので（絶賛ニート無職並感）</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="日記" term="日記"/>
        <category label="Twitter" term="Twitter"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PC 環境がなくなって1ヶ月半が経過したけど…？]]></title>
        <id>https://ningensei848.github.io/2022/05/11/</id>
        <link href="https://ningensei848.github.io/2022/05/11/"/>
        <updated>2022-05-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[4 月の冒頭でも紹介したように、PC 環境が無くなって一か月が経とうとしている。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://ningensei848.github.io/2022/04/01">4 月の冒頭</a>でも紹介したように、PC 環境が無くなって一か月が経とうとしている。
三月末のギリギリになって無線キーボードとマウスを購入し、どうにか物理入力インタフェースは確保したが、プログラミング環境は満足に得られていない状況が続いている。</p>
<p>色々と足掻けば何かしら解決したのかもしれないが、その代わりにもっと別の価値ある（と思い込んでいる）ことに勤しんで 4 月は消えた（ついでに GW も）。</p>
<p>じゃあ具体的に何をしていたのかというと、ひたすら調査をしていた。</p>
<p>学部一年時の JKJ こと情報基礎実習で学んだように、名前と所属をひたすらググって特定・記録・魚拓……</p>
<p>この辺のやり方は忘れないうちにきちんとメモしておきたい。
というかあとで必要になるから確実に明文化しておかねば……</p>
<hr>
<p>おおよそ一か月強という期間で終えられたのは幸いだった。
自意識肥大というか、「色気」を出しすぎた人々だったのが効いているのだと思う。</p>
<p>一方で、「木を隠すなら森の中」を全力で執行する人々もいた。
これは完全に予想でしかないが、名前やら所属やらにアイデンティティを見出さなくてもいい程度に恵まれているということなのかもしれない。
それはそれでいい人生だなぁ……</p>
<hr>
<p>で、これで調査を終えるわけではなく、むしろこれが始まりと言える。
現状ただ単にググったものをまとめただけだし、これがまさしく正しいと胸を張って言えるわけではなく、ゴネられたら負ける微妙なラインのものも含まれている。
鍵かけて引き篭もられたら負けなので、まずは必要なデータを全部引っこ抜いてから、その後本人確定を進めていければ良いと思う。
ついでにインタビュー調査までやれると GOOD ではあるが、さすがにそこまでできるかというと不安が残るところ。</p>
<hr>
<p>「距離を取れ」との呼びかけからも分かるとおり、あれは身内への号令に他ならない。
つまり、これへの同調はムラの一員であることの表明に他ならない。</p>
<p>という視点で見ると、やはり FF 関係は掘ってみるべきだろう。
彼らがどんな世界を見ていたのか、どんな景色が見えているのかを知っておきたい。
広く世の中を見据えたときに「白」であるものも、その集団内においては「赤」く見えることもあるのやも。</p>
<p>そしてそれが明らかになれば、今度は白く見えている人々の方から自発的に「赤」い勢力と距離を取ることができる。
交われば赤くなる……そうならないためにも、赤を隔離しておこう。</p>
<p>「差別反対」なんてお題目は唱えさせない。<br>
「「距離を取れ」と叫ぶ人から距離を取る」ことのどこが差別なのだろうか？</p>
<hr>
<p>ともあれ、今はまだ PC 環境がない。
もちろん金を出せば解決する問題ではあるが、肝心の金がない。
金を稼ぐには PC が必要……鶏卵問題である。</p>
<p>もっと note に記事を書いてお駄賃をねだろうか？
かけるネタはあるが、それをやるにはまだ準備が足りないのだなぁ…</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="日記" term="日記"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[【オープンレター】署名者を検索するツールをつくった【#againstc】]]></title>
        <id>https://ningensei848.github.io/2022/04/06/</id>
        <link href="https://ningensei848.github.io/2022/04/06/"/>
        <updated>2022-04-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[とはいうものの、実際に作ったのはひと月ほど前だしサイト全体としては全然不完全なものなので、満足いっているかと云うとそうでもない。]]></summary>
        <content type="html"><![CDATA[<p>とはいうものの、実際に作ったのはひと月ほど前だしサイト全体としては全然不完全なものなので、満足いっているかと云うとそうでもない。</p>
<p>シェアする際にパスが抜け落ちる不具合があるらしく、意気揚々と Twitter でシェアしたリンクが製作者のブログにしか通じていないとかいうホンマごめん案件もちらほら……（かくいうこの記事に辿り着いた人々もそれに該当するかもしれない）</p>
<p>実際に署名者検索ができるのは<a href="https://ningensei848.github.io/againstc/topic/open-letters/search" target="_blank" rel="noopener noreferrer">こちら</a>です　 → <a href="https://ningensei848.github.io/againstc/topic/open-letters/search" target="_blank" rel="noopener noreferrer">https://ningensei848.github.io/againstc/topic/open-letters/search</a></p>
<p>(※以下、蛇足というか解説というか雑感)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使い方">使い方<a href="https://ningensei848.github.io/2022/04/06/#%E4%BD%BF%E3%81%84%E6%96%B9" class="hash-link" aria-label="Direct link to 使い方" title="Direct link to 使い方">​</a></h2>
<p><a href="https://note.com/ningensei848/n/n073d2768032a" target="_blank" rel="noopener noreferrer">note</a> でもちょろっと書いたのだが、検索アプローチとして 2 種類が実装されている。
一つが普通のキーワード検索、もう一つが「正規表現による高度な検索」である。</p>
<p><a href="https://note.com/ningensei848/n/n073d2768032a" target="_blank" rel="noopener noreferrer">https://note.com/ningensei848/n/n073d2768032a</a></p>
<p>この辺の切り替え UI がモバイル向けだとわかりにくかったのか、<em>KEYWORD</em> は読めても、<em>ADVANCED</em> を目に入れる人は少ないようだ。
あるいは、"タブで切り替える" という UI がそもそも経験的に知っていないとわからないということなのかもしれない（いわゆるシグニファイアってやつがダメ？）</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="advanced">ADVANCED<a href="https://ningensei848.github.io/2022/04/06/#advanced" class="hash-link" aria-label="Direct link to ADVANCED" title="Direct link to ADVANCED">​</a></h3>
<p>Advanced 検索では以下の機能が実装されている：</p>
<ul>
<li>keyword ではなく regular expression をクエリとする</li>
<li>フォームを増やして複数のパターンを組み合わせられる</li>
<li>AND/OR の切り替えが可能</li>
<li>Exclude (除外検索)の切り替えが可能</li>
<li>結果のエクスポート</li>
</ul>
<p>もはや情報リテラシーが足りなかったあの頃の記憶は遠く彼方にあり、上記の短文解説以上になにを語ればいいのかわからない。
このような機能があります、ぜひ必要に応じて生かしてください、以上……</p>
<p>で、投げるのも無責任なので、検索事例集として note を書こうと思う。</p>
<p>→ 書きました：　<a href="https://note.com/ningensei848/n/n706121639edc" target="_blank" rel="noopener noreferrer">https://note.com/ningensei848/n/n706121639edc</a></p>
<p>ぐだぐだ分かりにくく説明するよりも、実際に検索してみた具体例を見せた方が効果的だろう。
また、それを見て「自分でも使ってみるか」となることにも期待できる。</p>
<ul>
<li><a href="https://note.com/ningensei848/n/n706121639edc" target="_blank" rel="noopener noreferrer">【オープンレター】署名者を雑に分析する【#againstc】</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="雑感">雑感<a href="https://ningensei848.github.io/2022/04/06/#%E9%9B%91%E6%84%9F" class="hash-link" aria-label="Direct link to 雑感" title="Direct link to 雑感">​</a></h2>
<p>2022/04/06 現在、オリジナルのオープンレターは非公開となってしまったけれど、おそらく年内には「紙媒体に何らかの形で記録を残すことを現在検討」していたのだから、なんらかの形でなんらかが出てくるのだろう。
オープンレターそれ自体があんなにも無責任で他責的なものだったのだから、それをもとにした出版物もさぞ無責任なものが出てくることだろう（これは直喩的誹謗中傷ですか？）</p>
<p>そういうものに無批判 / 無思考に賛同していた署名者各位は、撤回の機会があったにも関わらずそれを見過ごして賛意を表明していたということで、今後も永遠にネットにその名が刻まれることでしょう……よかったですね〜〜（オープンレターは「正義」なので何の問題もないのですよぬ）</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="オープンレター" term="オープンレター"/>
        <category label="キャンセルカルチャー" term="キャンセルカルチャー"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[貸与PCを返却して手元にはiPadしか残されていねぇ]]></title>
        <id>https://ningensei848.github.io/2022/04/01/</id>
        <link href="https://ningensei848.github.io/2022/04/01/"/>
        <updated>2022-04-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[というわけで、この記事の投稿は粉骨砕身、iPad 経由で頑張った記録となります。]]></summary>
        <content type="html"><![CDATA[<p>というわけで、この記事の投稿は粉骨砕身、iPad 経由で頑張った記録となります。</p>
<p>探せば色々あるんだなぁ……</p>
<p>バイト先で貸与されていた pc を先月末付で返却し、手元には iPad しかないという状況に陥りました。
これまで使用していた開発環境すべてを失ったことになります（悲しい）</p>
<p>が、次の pc を用意することがまだできていません。
金銭的な問題でもあるし、自業自得でもあるかもしれません。</p>
<p>でもずっとソシャゲをやっているばかりでは何も進まないし、なにより職を得るためになんらか成果物を作ってみせるということができる環境は少なくとも欲しいです。
というわけで、iPad だけでもどうにかならないか検討しました（2022 年 4 月時点）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="よさそうなアプローチ">よさそうなアプローチ<a href="https://ningensei848.github.io/2022/04/01/#%E3%82%88%E3%81%95%E3%81%9D%E3%81%86%E3%81%AA%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81" class="hash-link" aria-label="Direct link to よさそうなアプローチ" title="Direct link to よさそうなアプローチ">​</a></h2>
<p>いくつかよさそうなアプローチがあることは分かった</p>
<ul>
<li><a href="https://github.com/coder/code-server" target="_blank" rel="noopener noreferrer"><code>code-server</code></a> によるセルフホスト</li>
<li><a href="https://vscode.dev/" target="_blank" rel="noopener noreferrer"><strong>vscode.dev</strong></a></li>
<li><a href="https://github.co.jp/features/codespaces" target="_blank" rel="noopener noreferrer"><code>GitHub codespaces</code></a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="code-server">code-server<a href="https://ningensei848.github.io/2022/04/01/#code-server" class="hash-link" aria-label="Direct link to code-server" title="Direct link to code-server">​</a></h3>
<p>vscode を vps 上に置いて、そこへ SSH 接続してつかうありふれた方式のものであるようだ。
他と違い、こちらは vscode や GitHub との公式な関わりはなく（？）コミュニティベースで開発されている気がする。</p>
<p>vps 環境が自分で選べるので、はちゃめちゃに大容量が必要とかマシンパワーがモリモリにしたいという用途だと，こちらも上がるかもしれない。
が、手軽さという視点では codespace でいいじゃんとなるかも…</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="vscodedev">vscode.dev<a href="https://ningensei848.github.io/2022/04/01/#vscodedev" class="hash-link" aria-label="Direct link to vscode.dev" title="Direct link to vscode.dev">​</a></h3>
<p>この記事を編集しているのも、実はこの vscode.dev 上である。</p>
<p>対応しているブラウザであれば、上部の検索バーに "vscode.dev" と打ち込むだけでブラウザ版の vscode 画面が開かれる。
左上のハンバーガーメニューから "open remote repository" を選択し、GitHub のアカウントとの連携を済ませれば、いつもの通りの画面でリポジトリを開くことができるのがわかるだろう。</p>
<p>違和感はほとんどなくだいぶ快適に使えるが、肝心の Terminal 機能がさっぱり使えない。
「使用感が悪い」とかではなく、機能として実装されていない。
まぁそれはすべてブラウザ上で動いているから当然といえば当然で、こちらの機能も使いたい場合は codespace に課金することになるだろう。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="github-codespaces">GitHub CodeSpaces<a href="https://ningensei848.github.io/2022/04/01/#github-codespaces" class="hash-link" aria-label="Direct link to GitHub CodeSpaces" title="Direct link to GitHub CodeSpaces">​</a></h3>
<p>これまでに述べてきた二つのアプローチを兼ね備えた現状最強の方法である。</p>
<p>……ということまではわかっているのだが、まだ個人相手にはパブリックになっていないようだ。</p>
<p><a href="https://github.co.jp/features/codespaces" target="_blank" rel="noopener noreferrer">https://github.co.jp/features/codespaces</a></p>
<p>さっそくベータ版に申し込んだ。
いつぐらいから使えるようになるだろうか？
ベータに参加する個人相手には現状課金しないようなので、うまいこと試せればいいのだが……</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="まとめ">まとめ<a href="https://ningensei848.github.io/2022/04/01/#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to まとめ" title="Direct link to まとめ">​</a></h2>
<p>無論、 pc が手元にあればこんなに苦労する必要はなく、素直に VSCode をインストールすればよいだけである。
敢えて自前の pc から codespace を使うとすれば、潤沢なリソースを持った環境でコードの実行・編集を行いたい場合とか、リポジトリがそもそもデカ過ぎてローカルに持ってくるだけで一苦労とか、そういう限られた用途になるだろう。</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="日記" term="日記"/>
        <category label="奮闘記" term="奮闘記"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[netkeiba のデータをスクレイピングして LOD 化する（５）]]></title>
        <id>https://ningensei848.github.io/2022/03/30/</id>
        <link href="https://ningensei848.github.io/2022/03/30/"/>
        <updated>2022-03-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[まだ zenn.dev に記事としてまとめることは出来ていないが，着々と自動化処理が作成できてきた．]]></summary>
        <content type="html"><![CDATA[<p>まだ zenn.dev に記事としてまとめることは出来ていないが，着々と自動化処理が作成できてきた．</p>
<p>一方で，エラーに関してもエッジケースが現れたのでその例外処理もプチプチやっていく．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="自動化処理">自動化処理<a href="https://ningensei848.github.io/2022/03/30/#%E8%87%AA%E5%8B%95%E5%8C%96%E5%87%A6%E7%90%86" class="hash-link" aria-label="Direct link to 自動化処理" title="Direct link to 自動化処理">​</a></h2>
<p><code>dailyUpdate.py</code> をメインプログラムとして実行するのではなく，反復処理の一部として実行する．
すなわち，<del>元日から大晦日まで一日ずつ</del> 大晦日から元日まで一日ずつ<sup><a href="https://ningensei848.github.io/2022/03/30/#user-content-fn-1-2d8924" id="user-content-fnref-1-2d8924" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup> <code>dailyUpdate.py</code> に渡して 365 日処理ができるようにする．</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">firstDay </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2021</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">31</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">today </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> firstDay</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">loop_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">365</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> loop </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">loop_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"now is "</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> today</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    targetDate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">today</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">year </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">**</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> today</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">month </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">**</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> today</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">day</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    updateDaily</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">targetDate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># int(YYYYMMDD) を渡す</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    today </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> timedelta</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">days</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="こまめにコミット">こまめにコミット<a href="https://ningensei848.github.io/2022/03/30/#%E3%81%93%E3%81%BE%E3%82%81%E3%81%AB%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88" class="hash-link" aria-label="Direct link to こまめにコミット" title="Direct link to こまめにコミット">​</a></h3>
<p>また，一年分も処理をすると得られるデータ数が膨大なものとなり，あとでコミットするのに支障をきたすかもしれない．
そのため，一週間ごとにこまめにコミットさせる．</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">makeCommands</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> datetime</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timezone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timedelta</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hours</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">strftime</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    git_add </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"git"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"add"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"."</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    git_commit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"git"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"commit"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"-m"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:#e3116c">f"Update: horse and race data || </span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">{</span><span class="token string-interpolation interpolation">dt</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">}</span><span class="token string-interpolation string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    git_gc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"git"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"gc"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"--prune=all"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    git_push </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"git"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"push"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">git_add</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> git_commit</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> git_gc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> git_push</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">gitCommit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> proc </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> makeCommands</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        subprocess</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">proc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> encoding</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"utf-8"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> stdout</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">subprocess</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">PIPE</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">firstDay </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2021</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">31</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">today </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> firstDay</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">loop_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">365</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> loop </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">loop_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"now is "</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> today</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    targetDate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">today</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">year </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">**</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> today</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">month </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">**</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> today</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">day</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    updateDaily</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">targetDate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># int(YYYYMMDD) を渡す</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    today </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> timedelta</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">days</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># こまめにコミット</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> loop </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        gitCommit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ファイルの存在判定重複リクエストをなくす">ファイルの存在判定（重複リクエストをなくす）<a href="https://ningensei848.github.io/2022/03/30/#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%AD%98%E5%9C%A8%E5%88%A4%E5%AE%9A%E9%87%8D%E8%A4%87%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%82%92%E3%81%AA%E3%81%8F%E3%81%99" class="hash-link" aria-label="Direct link to ファイルの存在判定（重複リクエストをなくす）" title="Direct link to ファイルの存在判定（重複リクエストをなくす）">​</a></h3>
<p>さらに，処理を高速化するために既存のファイルの有無によってリクエストを減らす．
<code>horse_id</code> によってディレクトリ構造および HTTP リクエストが管理されているが，<a href="https://docs.python.org/ja/3/library/pathlib.html" target="_blank" rel="noopener noreferrer"><code>pathlib</code></a> によってこの ID を持つファイルへのパスオブジェクトを作成し，<code>Path.exists()</code> で存在を確認する．
ファイルが無い場合に絞ってリクエストを行えば，処理が繰り返されるたびに 1 ループに必要な時間は減っていくことだろう．</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">filter.py</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> pathlib </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Path</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cwd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">cwd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getHorsePath</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">horse_id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">dir</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"json"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> Path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    yyyy</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> xxxx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> zz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> horse_id</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> horse_id</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> horse_id</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    filepath </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cwd </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"data"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"horse"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token builtin">dir</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"profile"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> yyyy </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> xxxx </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:#e3116c">f"</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">{</span><span class="token string-interpolation interpolation">zz</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">}</span><span class="token string-interpolation string" style="color:#e3116c">.json"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> filepath</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">filteringDuplicated</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">horse_list</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> List</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    unregistered_horse_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">horse_id </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> horse_id </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> horse_list </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> getHorsePath</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">horse_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> unregistered_horse_id</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="unicodedecodeerror"><code>UnicodeDecodeError</code><a href="https://ningensei848.github.io/2022/03/30/#unicodedecodeerror" class="hash-link" aria-label="Direct link to unicodedecodeerror" title="Direct link to unicodedecodeerror">​</a></h2>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">UnicodeDecodeError: 'euc_jp' codec can't decode byte 0xf9</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Traceback </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">most recent call last</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"python/temp.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">36</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">module</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    updateDaily</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">targetDate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/python/dailyUpdate.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">65</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    processHorseData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">horse_list</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">horse_list</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> limit</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">PARALLEL_LIMIT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/python/getHorseProfile.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">503</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    loop</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">run_until_complete</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">horse_list</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> coro</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> limit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/usr/lib/python3.8/asyncio/base_events.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">616</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> run_until_complete</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> future</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/python/getHorseProfile.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">491</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> _run</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    responses </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> tqdm</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">gather</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">tasks</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># wrapper for asyncio.gather</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/.venv/lib/python3.8/site-packages/tqdm/asyncio.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">79</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> gather</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> f </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> f </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> cls</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">as_completed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ifs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> loop</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">loop</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> timeout</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">timeout</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/.venv/lib/python3.8/site-packages/tqdm/asyncio.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">79</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">listcomp</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> f </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> f </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> cls</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">as_completed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ifs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> loop</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">loop</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> timeout</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">timeout</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/usr/lib/python3.8/asyncio/tasks.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">619</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> _wait_for_one</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># May raise f.exception().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/.venv/lib/python3.8/site-packages/tqdm/asyncio.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">76</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> wrap_awaitable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/python/getHorseProfile.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">468</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> _bound_fetch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> _fetch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">session</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> horse_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> coro</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/python/getHorseProfile.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">455</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> _fetch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> coro</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">horse_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res_top</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res_ped</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/python/getHorseProfile.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">407</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> coroutine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    content_top </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> res_top</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">text</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">encoding</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">ENCODING</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File </span><span class="token string" style="color:#e3116c">"/path/to/ML4Keiba/.venv/lib/python3.8/site-packages/aiohttp/client_reqrep.py"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> line </span><span class="token number" style="color:#36acaa">1085</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> text</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">_body</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">decode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># type: ignore[no-any-return,union-attr]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UnicodeDecodeError</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'euc_jp'</span><span class="token plain"> codec can't decode byte </span><span class="token number" style="color:#36acaa">0xf9</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> position </span><span class="token number" style="color:#36acaa">26711</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> illegal multibyte sequence</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>リクエストをバイナリデータから <code>euc-jp</code> で読み込むときに，「<strong>髙﨑</strong>」が悪さをして <code>UnicodeDecodeError</code> が起きてしまった．</p>
<p><a href="https://qiita.com/inoory/items/aafe79384dbfcc0802cf#%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E7%B5%90%E6%9E%9C" target="_blank" rel="noopener noreferrer">https://qiita.com/inoory/items/aafe79384dbfcc0802cf#エラーハンドラを指定したときのデコード結果</a></p>
<p>いろいろ試したところ，<code>surrogateescape</code> だとうまくいくときとそうでない場合があるようだ．
一方で <code>backslashreplace</code> だと常に成功するが，<code>\\xe3\\x81\\xb2\\xe3\\x82\\x89\\xe3\\x82</code> のような表記がデータ上に残ってしまう．</p>
<p>現状，うまく回避する方法が（自分では）よくわかっていないため，<code>try-except</code> 構文でエラーが起きるたびそれを回避する方法を取ることとする．</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">content_top </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> res_top</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">text</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">encoding</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">ENCODING</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> errors</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"surrogateescape"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">content_ped </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> res_ped</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">text</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">encoding</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">ENCODING</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> errors</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"surrogateescape"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">try</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    meta </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> getHorseMeta</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BeautifulSoup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">content_top</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"lxml"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">except</span><span class="token plain"> Exception </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">file</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">sys</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stderr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    content_top </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> res_top</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">text</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">encoding</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">ENCODING</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> errors</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"backslashreplace"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    meta </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> getHorseMeta</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BeautifulSoup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">content_top</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"lxml"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ped </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> getHorsePed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BeautifulSoup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">content_ped</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"lxml"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://docs.python.org/ja/3/library/codecs.html#error-handlers" target="_blank" rel="noopener noreferrer">codecs --- codec レジストリと基底クラス — Python 3.10.0b2 ドキュメント</a> とか <a href="https://imagawa.hatenadiary.jp/entry/2016/12/25/193000" target="_blank" rel="noopener noreferrer">Python でサロゲートペア -- ほっけの逆襲 - 今川館</a> あたりが正解なんじゃあないかな～～と思いつつ，とりあえず現段階ではデータ収集を優先する．</p>
<p>あとになって余裕ができてからデータクレンジングを行えばよいだろう（ヨシッ！👈😹）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getid"><code>getId()</code><a href="https://ningensei848.github.io/2022/03/30/#getid" class="hash-link" aria-label="Direct link to getid" title="Direct link to getid">​</a></h2>
<p><code>getId()</code> で与えられた文字列から ID を引っこ抜いていたが，以外にもロバストネスが低いことがわかったため，処理を冗長化した．</p>
<p>正規表現を使うのもアリではあるのだが，プロバイダ側で ID の表記ルールを変更されたら追従しにくいため，別のアプローチを取った．</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token builtin">type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">is</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token builtin">type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">is</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> url</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id_ </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"="</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> id_</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>とりあえず本日までの進捗はこんなところだろうか．</p>
<p>データクレンジングの課題については適宜 Issue を建てて後から参照して直すことになるだろう．
未来の自分にぶん投げて申し訳ない……😢</p>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://ningensei848.github.io/2022/03/30/#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-2d8924">
<p>遡っていくほうが，既知の ID と衝突しやすい（重複リクエストを減らしやすい）と考え直した（が，そこまでの違いはないかも？） <a href="https://ningensei848.github.io/2022/03/30/#user-content-fnref-1-2d8924" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="python" term="python"/>
        <category label="スクレイピング" term="スクレイピング"/>
        <category label="競馬" term="競馬"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[netkeiba のデータをスクレイピングして LOD 化する（４）]]></title>
        <id>https://ningensei848.github.io/2022/03/28/</id>
        <link href="https://ningensei848.github.io/2022/03/28/"/>
        <updated>2022-03-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[JSON-LD のコンテキストもどうにか定義し，半信半疑だった API Gateway を活用したサーバ負荷回避 リクエスト制限の回避も実現できた．]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/Ningensei848/ML4Keiba/blob/main/context.jsonld" target="_blank" rel="noopener noreferrer"><code>JSON-LD</code> のコンテキスト</a>もどうにか定義し，半信半疑だった API Gateway を活用した<del>サーバ負荷回避</del> リクエスト制限の回避も実現できた．
これでようやくスクレピングによるデータ収集が始められる．</p>
<p>今回得た知見は，後ほど Zenn にまとめることとする．</p>
<p>全てのコードは <a href="https://github.com/Ningensei848/ML4Keiba" target="_blank" rel="noopener noreferrer">Ningensei848/ML4Keiba</a> においてある．
シンプルな Node.js プロジェクト内部に Poetry プロジェクトを同居させた構成となっている．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="api-gateway-による多重リクエスト制限の回避">API Gateway による多重リクエスト制限の回避<a href="https://ningensei848.github.io/2022/03/28/#api-gateway-%E3%81%AB%E3%82%88%E3%82%8B%E5%A4%9A%E9%87%8D%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E5%88%B6%E9%99%90%E3%81%AE%E5%9B%9E%E9%81%BF" class="hash-link" aria-label="Direct link to API Gateway による多重リクエスト制限の回避" title="Direct link to API Gateway による多重リクエスト制限の回避">​</a></h2>
<p>DoS 攻撃としてよく知られているように，短時間に極めて大量のリクエストをサーバに送ることは，それだけで悪意ある攻撃と見做されても仕方がない．
リクエストをさばくロードバランサやプロキシサーバがリクエスト送信者の同一性を検知し，一定量を超えるとそれ以上応答が帰ってこなくなる．
このような事態に陥ると，一定時間を待機すれば制限が解除される場合もあれば，永遠にその IP からはアクセスできなくなるという場合もある．</p>
<p>これがすなわち何らかの刑事罰に直結するというわけではないが，機械的なリクエストはあくまでジェントルに，悪意の有無に関わらず利己的な操作はすぐに排除されるものだと心に刻んでスクリプトを組まねばならない．</p>
<p>が，逆説的に，IP が同一のものでなければシャットダウンする理由はない．
別の IP からのリクエストを見比べて，それが同一のユーザから送られたものであると判断するには材料が足りないし，なによりすべてのリクエストに対してそんな処理を挟む余裕もない．</p>
<p>俗に「IP アドレスローテーション」とかいう work around らしい．</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cloud-functions-gen2-を生やして-gateway-でまとめる">Cloud Functions (Gen2) を生やして Gateway でまとめる<a href="https://ningensei848.github.io/2022/03/28/#cloud-functions-gen2-%E3%82%92%E7%94%9F%E3%82%84%E3%81%97%E3%81%A6-gateway-%E3%81%A7%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B" class="hash-link" aria-label="Direct link to Cloud Functions (Gen2) を生やして Gateway でまとめる" title="Direct link to Cloud Functions (Gen2) を生やして Gateway でまとめる">​</a></h3>
<p>プロキシサーバを用意する……というとなんか難しそうな，フロントエンド人類には大変厳しい世界が待っていそうな気配がする．
と思われたのもつかの間，Google Cloud Functions をつかってリクエストを代理させるエンドポイントを用意し，大量のエンドポイント URL に対して API Gateway で一つにまとめてやればよいことに気がついた．</p>
<p>もちろん，コンソール画面でポチポチするのは大変厳しい．それが GUI の限界である．
しかし，GCP には <a href="https://cloud.google.com/sdk/docs" target="_blank" rel="noopener noreferrer">Cloud SDK</a> が用意されており，そのうち <a href="https://cloud.google.com/sdk/gcloud" target="_blank" rel="noopener noreferrer">gcloud CLI</a> を使えば上記操作が半自動化できる．</p>
<hr>
<p>というわけで用意したのが <a href="https://github.com/Ningensei848/ML4Keiba/tree/main/src" target="_blank" rel="noopener noreferrer">こちら</a> である．</p>
<p><code>index.ts</code> は実際に Function としてデプロイされるスクリプトだ．
単にクエリパラメータを読んで，そこに含まれた URL にリクエストを投げ，返ってきたデータをそのままこちらへ返してくれる．</p>
<p><code>deploy.ts</code> と <code>openapi.ts</code> は，ローカルで Cloud Functions と API Gateway に関する諸々の処理を全部やってくれるスクリプトだ．
<code>namelist.txt</code> に書き連ねたエントリポイントを元に Functions を生やし，その情報をもとに <code>openapi.yaml</code> を作成する．</p>
<p>と，上記の処理はすべて <code>npm run exec:all --name=NAME --project=projectName</code> で実行できるように NPM スクリプトに書いてある．
これを有効化するために <code>npm run gateway:describe:api --name=NAME --project=projectName</code> で API インスタンスの URI を入手し，<code>gcloud services enable my-api-123abc456def1.apigateway.my-project.cloud.goog</code> で有効化すれば完了だ．</p>
<p>この実行が完了したら，<code>npm run gateway:describe --name=NAME --project=projectName</code> で実際に作成されたエンドポイントの情報を得られる．
<code>namelist.txt</code> に書き連ねた名前の分だけ Cloud Functions に関数がデプロイされ，エントリポイントが生える．
実際に Python 等でスクレイピングする際には，この <code>namelist.txt</code> からパスを作成し，エンドポイントを叩く際にそのパスを参照させればよい．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="データ構造とディレクトリ構成">データ構造とディレクトリ構成<a href="https://ningensei848.github.io/2022/03/28/#%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%81%A8%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90" class="hash-link" aria-label="Direct link to データ構造とディレクトリ構成" title="Direct link to データ構造とディレクトリ構成">​</a></h2>
<p>集めたデータはすべて <code>/data</code> 以下に置いた．
GitHub のリポジトリ容量制限に引っかかるかもしれないな～～と思いつつ，流石にそこまでは肥大化しないだろうと高を括っている．</p>
<p>現段階では，主に <code>horse</code>, <code>race</code> で大分類を行なった．
将来的には，<code>jockey</code>, <code>trainer</code> , <code>owner</code>, <code>breeder</code> のディレクトリをつくることになるだろう．</p>
<p>その直下には，<code>csv</code>, <code>json</code>, <code>list</code> といったデータの構造に関するディレクトリ構成としたが，これは冗長だしわかりにくいかもしれない．
二度手間ではあるが，この階層は消して，すぐ直下に <code>YYYY</code> 等が置かれるように変更するかもしれない．</p>
<p><a href="https://ningensei848.github.io/2022/03/23#%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0">前回の記事</a> で検討したように，<strong>各馬ごとに一ファイルを割り当てる方針</strong> でディレクトリをつくる．
馬自身の血統やその他プロフ，戦績等は <code>horse_id</code> に紐づいているから，これを分割してやるのが都合が良い．
<code>YYYY</code> で生年，<code>XXXX</code> で小分類，<code>ZZ.tsv</code> とすることで，各小分類には最大でも 100 ファイル程度しか格納されないようにした（ただし，ID に数字以外が含まれている場合は，この限りではない）．同様にレース情報も <code>race_id</code> に紐づくようにした．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="毎日決まった時間にデータを更新">毎日決まった時間にデータを更新<a href="https://ningensei848.github.io/2022/03/28/#%E6%AF%8E%E6%97%A5%E6%B1%BA%E3%81%BE%E3%81%A3%E3%81%9F%E6%99%82%E9%96%93%E3%81%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%9B%B4%E6%96%B0" class="hash-link" aria-label="Direct link to 毎日決まった時間にデータを更新" title="Direct link to 毎日決まった時間にデータを更新">​</a></h2>
<p>GitHub Actions でスクレイピングを実行する．
リクエストの大元の送信者が IP で BAN されるとは考えにくいし，負荷分散をやったことで現実的な時間で処理を終えることができる．</p>
<p>サラッと流したが，スクレイピングを実際に行なう Python コードは<a href="https://github.com/Ningensei848/ML4Keiba/tree/main/python" target="_blank" rel="noopener noreferrer">こちら</a>においてある．
負荷分散を効率よく行なうために，HTTP リクエストのデファクトスタンダードであった <code>requests</code> を使うのではなく，<a href="https://docs.aiohttp.org/" target="_blank" rel="noopener noreferrer"><code>aiohttp</code></a> を採用した．</p>
<p>また，実装には<a href="https://gist.github.com/rhoboro/86629f831934827d832841709abfe715" target="_blank" rel="noopener noreferrer">asyncio, aiohttp を利用した並列処理のサンプルコード | GitHub Gist</a> を大いに参考にした．
<code>coroutine()</code> という url, response を受け取る任意のコルーチン（並列実行したい処理を行なう関数（？））を定義するだけで使えることがわかるだろう．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="まとめ">まとめ<a href="https://ningensei848.github.io/2022/03/28/#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to まとめ" title="Direct link to まとめ">​</a></h2>
<p>※<code>JSON-LD</code> について触れていないのは，いまのところその定義に自信が持てていないからだ．
間違っている可能性も大いにあるため，今の段階では言及しない．</p>
<p>これまで，</p>
<ul>
<li>Cloud Functions</li>
<li>API Gateway</li>
<li>ディレクトリ構成の検討</li>
<li>スクレイピング</li>
</ul>
<p>をやってきた．</p>
<p>どうにかベースとなるデータはきれいに集まりそうである．
が，まだまだそれはシード値として使えるというだけで，まったく全体を網羅することは出来ていない．
特に，血統情報が重要なのはわかりきっているのに，いまだ子だけで，父母，祖父母……について遡ることは出来ていない．
血統を遡ってスクレイピングするのは非常に手間がかかるであろうことはわかるので，またおいおいやっていく．</p>
<p>また次回 ✋</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="python" term="python"/>
        <category label="スクレイピング" term="スクレイピング"/>
        <category label="競馬" term="競馬"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[netkeiba のデータをスクレイピングして LOD 化する（３）]]></title>
        <id>https://ningensei848.github.io/2022/03/23/</id>
        <link href="https://ningensei848.github.io/2022/03/23/"/>
        <updated>2022-03-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前回はスクレイピング効率を高めるためにプロキシサーバを作ろうという試みを行なって終わった．]]></summary>
        <content type="html"><![CDATA[<p>前回はスクレイピング効率を高めるためにプロキシサーバを作ろうという試みを行なって終わった．
今回は具体的にどのようにデータを集めるか検討する．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="race_id"><code>race_id</code><a href="https://ningensei848.github.io/2022/03/23/#race_id" class="hash-link" aria-label="Direct link to race_id" title="Direct link to race_id">​</a></h2>
<p>前回でも少し触れたように，netkeiba では <code>/top/race_list_sub.html</code> に対して <code>?kaisai_date=YYYYMMDD</code> を投げて HTML の断片を受け取っている．
この URL に対してスクレイピングをかければ，うまいことレースの一覧が得られるということである．</p>
<p>この URL の嬉しい点として，起点が <code>YYYYMMDD</code> になっているところである．
例えば本日の日付 <code>20220315</code> を投げれば今日開催されるレースが返ってくる………それはつまり，毎日繰り返し定期的にデータを集められるようになるということだ．</p>
<p>また嬉しいことに，JRA だけでなく NAR（地方競馬）についても同様の方法でレース一覧情報が提供されていた．
こちらは JRA と異なり平日もバンバン開催されているので，試行回数を増やせるという点ではアドバンテージとなりうるだろう．</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="netkeiba-の文字コード">netkeiba の文字コード<a href="https://ningensei848.github.io/2022/03/23/#netkeiba-%E3%81%AE%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89" class="hash-link" aria-label="Direct link to netkeiba の文字コード" title="Direct link to netkeiba の文字コード">​</a></h3>
<p>「競馬の予測」に使えるのは「レース結果」ではなくレース直前の情報だが，それは <code>https://{race|nar}.netkeiba.com/race/shutuba.html?race_id=YYYYPPNNDDRR</code> で得ることができる．
ただし，気をつけるべきことがあった．
それは，netkeiba のページにおける文字コードが <strong>EUC-JP</strong> に指定されているということである．</p>
<p>たかが文字コード，されど文字コード…… 主に Python でのスクレイピングかつ対象が日本語ページであるとを考えると，これは死活問題である．
おそらくは <a href="https://requests-docs-ja.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer"><code>requests</code></a> + <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc" target="_blank" rel="noopener noreferrer"><code>BeautifulSoup</code></a> の組み合わせでスクリプトを書くだろうが，これらの基本文字コードは <code>utf-8</code> である．
すなわち，なんにも意識せずリクエストを投げるとすぐ文字化けしたソースを見ることになる．</p>
<p>もし id だけを必要とする場合には，この問題は気にならない．
必要な要素が全て英数字記号のみで構成されているため文字化けしないからだ．
ネックとなるのは日本語情報をデータとして取得したいときだろう．</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="当日にならないと得られない情報">当日にならないと得られない情報<a href="https://ningensei848.github.io/2022/03/23/#%E5%BD%93%E6%97%A5%E3%81%AB%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84%E3%81%A8%E5%BE%97%E3%82%89%E3%82%8C%E3%81%AA%E3%81%84%E6%83%85%E5%A0%B1" class="hash-link" aria-label="Direct link to 当日にならないと得られない情報" title="Direct link to 当日にならないと得られない情報">​</a></h3>
<p><code>shutuba.html</code> では，枠・馬番・馬体重（＋オッズ）も得られるが，これらは直前になってから出ないと判明しないデータである．
すなわち，（１）前日までにスクレイピングした情報（２）レースの３０分前にスクレイピングした情報では<strong>情報量が異なる</strong>．</p>
<p>最も重要と思われる馬体重の発表は，おおよそ発走時刻の一時間前であるようだ．
十分に余裕があるが，一方でこれは何をトリガーにスクレイピングすればよいだろうか……？
あくまで目安の時間であるため，きっかり一時間前にリクエストを投げても結果が帰らないかもしれない．
一旦これは保留とする．</p>
<p>（賞味期限が極めて短いデータであるため，GitHub へ保存するよりは，一旦 Firestore 等を経由しておくのが賢いかも……？）</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="前日までに得られる情報">前日までに得られる情報<a href="https://ningensei848.github.io/2022/03/23/#%E5%89%8D%E6%97%A5%E3%81%BE%E3%81%A7%E3%81%AB%E5%BE%97%E3%82%89%E3%82%8C%E3%82%8B%E6%83%85%E5%A0%B1" class="hash-link" aria-label="Direct link to 前日までに得られる情報" title="Direct link to 前日までに得られる情報">​</a></h3>
<p>出走登録している馬の一覧を得ることができる．
ここからさらに前日あたりで本登録となり，出走できない馬も出てくる．
まぁそれはそれで致し方ないので，出走候補について全て情報を集めておくのが良いだろう．</p>
<p>コードを書く方針としては，すでに開催されたレースについても <code>shutuba.html</code> は見られるのでそれをもとに処理を書き，適宜例外処理を追加していく感じにすれば良いと思う．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="horse_id"><code>horse_id</code><a href="https://ningensei848.github.io/2022/03/23/#horse_id" class="hash-link" aria-label="Direct link to horse_id" title="Direct link to horse_id">​</a></h2>
<p>すべての馬に <code>/</code>, <code>/result</code>, <code>/ped</code> があり，繁殖入りできた場合には牡馬であれば <code>/sire</code>, 牝馬であれば <code>/mare</code> が存在する．
繁殖実績については現状の優先度は高くないので一旦置いておくとして，各馬のプロファイルは逐次集める必要がある．</p>
<p><code>/</code> と <code>/result</code> を見比べてみたところ，どちらにも同じ戦績テーブルが配置されていたため，<code>/result</code> へのスクレイピングは省略できそうだ．</p>
<p><code>/</code> （トップページ）では，各馬のプロファイルと戦績を取得できる．
後々ページコンテンツを充実させることを考えると，写真 URL も引っこ抜いてくるのがよさそうだ．</p>
<p><code>/ped</code> については，テーブルの形がだいぶイレギュラーなもので自前ではうまくパースできなかった．
代わりに，<code>pandas</code> の <code>read_html</code> を使ってテーブルを引っこ抜き，その構造を利用してうまいこと「世代ごと」にイテレーションできるようにした．
つまり，行で回すのではなく，列でループ処理できるようにした．
こうすれば，父母，祖父母……の処理が比較的簡単に実装できる．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="データ構造">データ構造<a href="https://ningensei848.github.io/2022/03/23/#%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0" class="hash-link" aria-label="Direct link to データ構造" title="Direct link to データ構造">​</a></h2>
<p>各馬のプロファイル，戦績，血統なんかも GET できたのだからそれをファイルデータとして保存しておきたい．
これまではうまく一行に押し込んたうえで，それを生年ごとに連ねて一つの TSV ファイルで管理していた．
しかし今後同時並列に複数箇所でデータ更新が走りうることを考えると，ACID 特性を備えていないのは手痛い．
（まぁ素直に DB 使えってツッコミはあるが，あくまで GitHub に残すことを中心に考える）</p>
<p>ファイル数が膨大になってしまうのを覚悟で，各馬ごとに一ファイルを割り当てる方針とする．
こうすれば，ファイル更新は最小限で済む．</p>
<p>次に問題になるのがフォーマットだが，サイズを考えると TSV が挙げられる．
しかし，たかが一行のデータのために TSV を使うのはもったいない（そうするならまとめろという話にもなる）．
ここはもっと柔軟な表現を持つ構造化データを用いるべきだと考えた．
サイズを考慮すると YAML が候補に上がるが，どの言語でも標準的に扱えるかと言うとそうではない．
じゃあやっぱり JSON か……とも思ったが，単に JSON を扱うだけでは芸がない，もとい LOD を謳うのに <a href="https://json-ld.org/" target="_blank" rel="noopener noreferrer"><strong>JSON-LD</strong></a> を無視するのはいただけない．</p>
<p><strong>各 ID ごとにファイルを作って管理，かつフォーマットとしては JSON-LD を用いるものとする</strong> というのが，今後の基本方針となった．</p>
<p>もちろん Virtuoso ではこのままでは使えないので，ローカルで <code>.ttl</code> へ変換するスクリプトも用意することになる．</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="python" term="python"/>
        <category label="スクレイピング" term="スクレイピング"/>
        <category label="競馬" term="競馬"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[LOD Challenge 2021 授賞式に参加した]]></title>
        <id>https://ningensei848.github.io/2022/03/13/</id>
        <link href="https://ningensei848.github.io/2022/03/13/"/>
        <updated>2022-03-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[LOD チャレンジ 2021に昨年秋～年末にかけて制作したものを応募した．]]></summary>
        <content type="html"><![CDATA[<p><a href="https://2021.lodc.jp/" target="_blank" rel="noopener noreferrer">LOD チャレンジ 2021</a>に昨年秋～年末にかけて制作したものを応募した．
本命の方は受賞を逃したが，<a href="https://zenn.dev/ningensei848/articles/virtuoso_on_gcp_faster_with_cos" target="_blank" rel="noopener noreferrer">副産物として生まれた記事</a>が<a href="https://2021.lodc.jp/awardPressRelease2021.html" target="_blank" rel="noopener noreferrer">LOD プロモーション賞</a>を受賞した．</p>
<p><a href="https://zenn.dev/ningensei848/articles/virtuoso_on_gcp_faster_with_cos" target="_blank" rel="noopener noreferrer">https://zenn.dev/ningensei848/articles/virtuoso_on_gcp_faster_with_cos</a></p>
<blockquote>
<p>RDF トリプルストア構築のハードルを下げることは、LOD の普及のための重要な要素の一つです。
本作品は、代表的なトリプルストアである Virtuoso を自前で構築するための先行事例をさらに改良したものであり、技術面でのアプローチのしやすさと、インストール及びデータロードの速度向上が見込める優れたアイデアとして評価いたしました。
他の様々なクラウドサービスにも応用できそうです。今後さらなる発展を期待いたします。</p>
</blockquote>
<p>オンラインではあったが，事務局委員長の武田 英明氏からの言葉とリモート賞状授与を受けて少し涙が出てきた．
去年から色々散々な人生をやっていてメンタルはだいぶ暗いのだが，久々に誰かに褒めてもらって報われた気持ちになり感極まってしまった……</p>
<blockquote class="twitter-tweet" align="center" data-width="550" data-lang="ja" data-dnt="true"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/lodc2021?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">#lodc2021</a> LODプロモーション賞ありがとうございました！<br><br>来年はデータ作成＆活用の両部門に応募してさらに上を目指せるように今後も精進します！</p>— 春からきちんとします🌗 (@Ningensei848) <a href="https://twitter.com/Ningensei848/status/1502928431943598081?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">2022年3月13日</a></blockquote>
<blockquote class="twitter-tweet" align="center" data-width="550" data-lang="ja" data-dnt="true"><p lang="ja" dir="ltr">tkk先生の受賞式での姿を見てﾃﾞｭﾌﾌつってる<a href="https://t.co/ONPBqaP7YS" target="_blank" rel="noopener noreferrer">https://t.co/ONPBqaP7YS</a></p>— 春からきちんとします🌗 (@Ningensei848) <a href="https://twitter.com/Ningensei848/status/1502880947892412416?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">2022年3月13日</a></blockquote>
<blockquote class="twitter-tweet" align="center" data-width="550" data-lang="ja" data-dnt="true"><p lang="ja" dir="ltr"><a href="https://t.co/nFxvNenXSm" target="_blank" rel="noopener noreferrer">https://t.co/nFxvNenXSm</a><br><br>Google site だけども，高校生が頑張って作ってるのすごいなぁ………時代がどんどん</p>— 春からきちんとします🌗 (@Ningensei848) <a href="https://twitter.com/Ningensei848/status/1502895529948172297?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">2022年3月13日</a></blockquote>
<blockquote class="twitter-tweet" align="center" data-width="550" data-lang="ja" data-dnt="true"><p lang="ja" dir="ltr">在野のヤベェおっさん，金を時間に任せてまじでやべ～～～～＾ことをしててすごい，俺もこれになりたいが？</p>— 春からきちんとします🌗 (@Ningensei848) <a href="https://twitter.com/Ningensei848/status/1502901065796120578?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">2022年3月13日</a></blockquote>
<blockquote class="twitter-tweet" align="center" data-width="550" data-lang="ja" data-dnt="true"><p lang="ja" dir="ltr">ピコピコプラネットはマジですごいので見習いたいね<br><br>☆ピコピコプラネット☆ SPACE - SPARQLクエリ共有サイト<a href="https://t.co/ffUP2ulYR6" target="_blank" rel="noopener noreferrer">https://t.co/ffUP2ulYR6</a></p>— 春からきちんとします🌗 (@Ningensei848) <a href="https://twitter.com/Ningensei848/status/1502913211477024768?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">2022年3月13日</a></blockquote>
<hr>
<p>そろそろ気持ちを切り替えて色々人生をやっていかねばならない．</p>
<p>ちょうどシンポジウムの最後で Code for Japan さんの採用情報があった．
ここで一つ応募してみようと思う．</p>
<p><a href="https://recruit.code4japan.org/" target="_blank" rel="noopener noreferrer">https://recruit.code4japan.org/</a></p>
<p>人生始めて行かね～～～とな～～</p>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="LOD" term="LOD"/>
        <category label="オープンデータ" term="オープンデータ"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[netkeiba のデータをスクレイピングして LOD 化する（２）]]></title>
        <id>https://ningensei848.github.io/2022/03/12/</id>
        <link href="https://ningensei848.github.io/2022/03/12/"/>
        <updated>2022-03-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[python でデータを扱うにあたり，Notebook を使わない選択肢はないだろう．]]></summary>
        <content type="html"><![CDATA[<p>python でデータを扱うにあたり，Notebook を使わない選択肢はないだろう．
Google が提供する <a href="https://colab.research.google.com/" target="_blank" rel="noopener noreferrer">Colaboratory</a> を使って，「下書き」的にコードを書いていく．</p>
<p><a href="https://colab.research.google.com/" target="_blank" rel="noopener noreferrer">https://colab.research.google.com/</a></p>
<p>まずは，木曜の夕方には確定する出走馬情報を得るアプローチを考える．
netkeiba.com においては，開催レースの一覧が <code>/top/race_list.html</code> で提供されている．
ただし，これをそのまま cURL 等でページ取得しても，各日程ごとの情報は得られない．
なぜなら，jQuery で Ajax を頑張っているからだ（DevTool で調べてみるとわかるだろう）．</p>
<p>サーバクライアントモデルよろしく，API エンドポイントにリクエストを投げてデータだけを得てクライアント側で出力しているのかと思いきや，HTML コードの断片を貰って埋め込んでいるような方式のように見える．
同じく DevTool でネットワークを監視してみると，<code>/top/race_list_sub.html</code> に対して <code>?kaisai_date=YYYYMMDD</code> でリクエストを投げていることがわかった．</p>
<p><a href="https://race.netkeiba.com/top/race_list_sub.html?kaisai_date=YYYYMMDD" target="_blank" rel="noopener noreferrer">https://race.netkeiba.com/top/race_list_sub.html?kaisai_date=YYYYMMDD</a></p>
<p>留意すべきは，開催済み・開催前のレースの両方とも同一の形式で取得できてしまうことである．
すなわち，ベースとなる HTML が <code>/race/shutuba.html</code> と <code>/race/result.html</code> というように異なっている．</p>
<p>となると，beautifulSoup に喰わせるのではなく正規表現で <code>race_id</code> を引っこ抜いてくるのが賢いだろう．</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p>レース ID については，例えば凱旋門賞や香港スプリントといった中央競馬以外のレースの場合には，例外処理が必要かもしれない．
…………と思ったのもつかの間，ご丁寧に <code>?race_id=YYYYPPNNDDRR&amp;rf=race_list</code> といった具合に <code>&amp;rf=race_list</code> が手がかりとなってくれている．
ありがたくこれを活用し，正規表現でレース ID のみをぶっこ抜く．</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="スクレイピングの負荷分散">スクレイピングの負荷分散<a href="https://ningensei848.github.io/2022/03/12/#%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0%E3%81%AE%E8%B2%A0%E8%8D%B7%E5%88%86%E6%95%A3" class="hash-link" aria-label="Direct link to スクレイピングの負荷分散" title="Direct link to スクレイピングの負荷分散">​</a></h2>
<p>で，実際にスクレイピングしていくにあたって，<strong>負荷分散を考えねばならない</strong>という問題がある．
例えば手元の Python プログラムで秒間 150 回のリクエストをサーバに送ったとしよう．
それによって自分は素早く大量のデータを得ることができるが，そんな大量のリクエストを捌かねばならない（しかも無償で！）サーバ側はたまったものではない．
多くの場合，ロードバランサーなり監視システムなりが同一 IP からの異常リクエストを検知し遮断する措置が取られる．</p>
<p>データを集めるためには「お行儀よく」スクレイピングのコードを書く必要がある……とこれまでは思っていたが，あまりにも時間がかかりすぎる．
待っている時間にもサーバ利用料金は発生してしまうし，資源の無駄である．
どうにか回避するためには，<strong>複数箇所から同時並行に</strong>リクエストを投げれば良いことに気づくだろう．
各プロセスが 2 秒ずつ待機せねばならなかったとしても，それが 10 プロセス同時であれば効率は十倍になる（進次郎構文）．</p>
<p>最近になって，これを手軽に実装できるのは，<a href="https://cloud.google.com/api-gateway" target="_blank" rel="noopener noreferrer">Google API Gateway</a> + <a href="https://cloud.google.com/functions" target="_blank" rel="noopener noreferrer">Google Cloud Function</a> の組み合わせであろうことに気がついた．
単にリクエストのプロキシになってもらうというだけなので，特段難しいコードは存在しない（Fetch のみ）．
ちょうど先月にプレビュー版が出た Cloud Function Gen 2 を試しつつ，API Gateway で wrap して，Python からでも並列処理がしやすい方法を検討する．
<del>（ただし，現時点ではエントリポイントがパブリックにオープンになってて悪用の恐れがあるので，認証かなんかをきちんと検証する必要がある）</del></p>
<p>API Gateway に対するリクエストが膨大になっても問題ないっぽいし，認証に API キー使えば不特定多数にオープンになるリスクも減らせる．</p>
<blockquote class="twitter-tweet" align="center" data-width="550" data-lang="ja" data-dnt="true"><p lang="ja" dir="ltr">このドキュメントによると，「100秒あたり1000万リクエストまで」がレート制限っぽいので，個人が100並列でスクレイピングかける程度だと全然問題ないっぽい，やったぜ<a href="https://t.co/uAiCr1YTo8" target="_blank" rel="noopener noreferrer">https://t.co/uAiCr1YTo8</a> <a href="https://t.co/gFPWwErK6k" target="_blank" rel="noopener noreferrer">https://t.co/gFPWwErK6k</a></p>— 春からきちんとします🌗 (@Ningensei848) <a href="https://twitter.com/Ningensei848/status/1502576964527267840?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">2022年3月12日</a></blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="api-gateway-と-cloud-function">API Gateway と Cloud Function<a href="https://ningensei848.github.io/2022/03/12/#api-gateway-%E3%81%A8-cloud-function" class="hash-link" aria-label="Direct link to API Gateway と Cloud Function" title="Direct link to API Gateway と Cloud Function">​</a></h2>
<p>色々こねこねして，使いたい名前をファイルに列挙するだけで API Gateway が生えるようにした．</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ npm run exec:all --name=NAME --project=projectName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ npm run gateway:describe --name=NAME --project=projectName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ npm run gateway:describe:api --name=NAME --project=projectName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ gcloud services enable my-api-123abc456def1.apigateway.my-project.cloud.goog</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>gateway:describe</code> でエンドポイントが得られ，<code>gateway:describe:api</code> で<strong>マネージドサービスプロパティ</strong>が表示される．
<code>gcloud services enable ${managedServiceUri}</code> で API を有効化することで，エンドポイントに対して API キーによる認証付きでリクエストができるようになる．</p>
<p>また，その API キーについては，コンソール上の<a href="https://console.cloud.google.com/apis" target="_blank" rel="noopener noreferrer">API とサービス</a>で取得する．
〈呼び出せるキーの制限〉は，<code>openapi.yaml</code> で <code>info.title</code> で指定したもの<sup><a href="https://ningensei848.github.io/2022/03/12/#user-content-fn-1-afd12d" id="user-content-fnref-1-afd12d" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>をドロップダウンから選べば良い．</p>
<p>これでエンドポイントには，クエリパラメータとして <code>key=${API_KEY}</code> を渡さないと拒否されるようになった．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="リクエストのプロキシ">リクエストのプロキシ<a href="https://ningensei848.github.io/2022/03/12/#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7" class="hash-link" aria-label="Direct link to リクエストのプロキシ" title="Direct link to リクエストのプロキシ">​</a></h2>
<p>いよいよ python コードを書くことになるが，リクエストを投げるのは対象とする URL ではなく，API Gateway のエンドポイントであり，URL はクエリパラメータとして <code>url=${TARGET_URL}</code> という形で渡す．
返り値は特に加工してないため，単純にリクエストを投げたのと同様の HTML が返る．
一箇所から規定時間内に規定回数以上のリクエストを投げると，DoS 攻撃と勘違いされてアクセス制限の憂き目に合うが，Cloud Functions で負荷分散＋ Gateway でプロキシしてやれば，問題は生じないかも？</p>
<p>まだ検証していない段階だが，ひとまず API Gateway の自動生成までは出来たので一区切り．</p>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://ningensei848.github.io/2022/03/12/#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-afd12d">
<p><a href="https://cloud.google.com/api-gateway/docs/secure-traffic-gcloud#creating_an_api_config" target="_blank" rel="noopener noreferrer">API 構成の作成</a>を参照 <a href="https://ningensei848.github.io/2022/03/12/#user-content-fnref-1-afd12d" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="python" term="python"/>
        <category label="スクレイピング" term="スクレイピング"/>
        <category label="競馬" term="競馬"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[netkeiba のデータをスクレイピングして LOD 化する（１）]]></title>
        <id>https://ningensei848.github.io/2022/03/08/</id>
        <link href="https://ningensei848.github.io/2022/03/08/"/>
        <updated>2022-03-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[改めて，Netkeiba からスクレイピングをやっていく．]]></summary>
        <content type="html"><![CDATA[<p>改めて，Netkeiba からスクレイピングをやっていく．
Python でやるのは，リクエストに間隔を開ける都合上，多少時間がかかっても問題がないことや，DataFrame 系の資産を使い回せることが利点として挙げられる</p>
<p><a href="https://github.com/Ningensei848/ml4keiba" target="_blank" rel="noopener noreferrer">https://github.com/Ningensei848/ml4keiba</a></p>
<p><a href="https://github.com/Ningensei848/ml4keiba" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" src="https://4.bp.blogspot.com/-7KSDS7fjQZU/U1T4Hfdp7aI/AAAAAAAAfds/kxPMlCXrIkk/s200/seiza13_hebitsukai.png" alt="ギリシャ神話に出てくる蛇を持つ医者アスクレーピオス（へびつかい座）" class="img_ev3q"></a></p>
<p>前回までの反省として，<strong>何も考えずひたすらにスクレイピングしていた</strong> というものが挙げられる．すなわち，不要なデータまでも「必要かもしれない」と集めて時間を浪費していた．これは，リストを作ってそれを一つずつ実行する設計になっていたことが原因だ．</p>
<p>例えば本日はちょうど「弥生賞ディープインパクト記念」をやっている．
このレースの予想をデータ分析によって行う場合に，「天皇賞（春）」のデータが必要だろうか？</p>
<p>最初から「完璧」を目指して作ろうとするからポンコツ不完全にしかならないという現実があるので，実際のレース時期に合わせてちいさくはじめていくべきだろう．</p>
<p>今回で言えば，弥生賞に出てくる馬それぞれの過去のレースを探ったり，過去の弥生賞についてデータを浚ったりするのが常道といえる．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="てがかり">てがかり<a href="https://ningensei848.github.io/2022/03/08/#%E3%81%A6%E3%81%8C%E3%81%8B%E3%82%8A" class="hash-link" aria-label="Direct link to てがかり" title="Direct link to てがかり">​</a></h2>
<p>まず，レースに出走する馬の一覧を入手する必要がある．</p>
<p>netkeiba では，<code>YYYYPPNNDDRR</code> という ID でレースごとの情報が管理されている．</p>
<ul>
<li><code>YYYY</code>: 開催年度</li>
<li><code>PP</code>: 会場コード</li>
<li><code>NN</code>: N 回目</li>
<li><code>DD</code>: 第 D 日</li>
<li><code>RR</code>: 第 R レース</li>
</ul>
<p>といった具合である．</p>
<p>過去の調査では，<code>PP</code> が厄介なことに，「地方」「海外」も雑多に含まれることがあり，単にインクリメントしているわけではないらしい．</p>
<p>（と，これを調べる過程で netkeiba.com が設立されたのが 1999 年末だということを知った，<sup><a href="https://ningensei848.github.io/2022/03/08/#user-content-fn-1-2ce0f1" id="user-content-fnref-1-2ce0f1" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>そろそろ四半世紀にもなる上に前世紀からデータ提供をやってるんだからすげぇ）</p>
<p><a href="https://ascii.jp/elem/000/000/306/306735/" target="_blank" rel="noopener noreferrer">ASCII.jp：ネットドリーマーズ、競馬のポータルサイト“netkeiba.com”を開設</a></p>
<p>これを書いているのは火曜日だが，週末に行われるレースについては現時点で出走馬も枠順も決まっていなかった．ただし週末に行われる重賞レースに登録されている馬の一覧は見ることができた．調べてみると netkeiba においては，以下のようなスケジュールで情報が書き換わるようだ：</p>
<ul>
<li>前週の日曜（G1 は前々週）　特別レース登録馬を公開</li>
<li>（netkeiba 独自）水曜 20 時ごろ　取材などからわかった水曜時点で出走意思のある馬（想定馬一覧）</li>
<li>木曜 16 時ごろ　　　　出走馬確定</li>
<li>レース前日 10 時ごろ　枠順確定</li>
</ul>
<p><a href="https://www.jra.go.jp/kouza/yougo/w333.html" target="_blank" rel="noopener noreferrer">特別レース（特別競走）</a> とは，"一般競走と違って、特別登録を必要とする競走。特別競走には、現在の中央競馬ではすべてレース名がつけられている。また重賞競走も特別競走のなかに含まれる" ものであるらしい．また<a href="https://www.jra.go.jp/kouza/yougo/w320.html" target="_blank" rel="noopener noreferrer">一般競走</a>とは，特別競走以外，すなわち新馬戦やオープン戦，条件戦などのことを指す<sup><a href="https://ningensei848.github.io/2022/03/08/#user-content-fn-2-2ce0f1" id="user-content-fnref-2-2ce0f1" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>．</p>
<p>つまり，おおよそほとんどの場合において，木曜日の夜あたりから情報収集を始めるのが良いということがわかる．
また，枠順が決まらないことには予想も固まらないことを考えると，レース前日の夕方から準備し始めても十分に間に合う．
金曜＋土日でレース本番への対策を行ない，それ以外の日には別の情報収集＋メンテナンスや振り返りというペース配分になるだろう．</p>
<p>（※これは中央競馬だけにフォーカスした場合の話で，平日もガンガン走っている地方競馬はまた別の話）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="出走馬一覧をシードとして">出走馬一覧をシードとして…<a href="https://ningensei848.github.io/2022/03/08/#%E5%87%BA%E8%B5%B0%E9%A6%AC%E4%B8%80%E8%A6%A7%E3%82%92%E3%82%B7%E3%83%BC%E3%83%89%E3%81%A8%E3%81%97%E3%81%A6" class="hash-link" aria-label="Direct link to 出走馬一覧をシードとして…" title="Direct link to 出走馬一覧をシードとして…">​</a></h2>
<p>netkeiba では，出走馬ごとに ID が振られており，それによって血統や戦績，厩舎や騎手などの情報を管理している．</p>
<p>日本生まれ，かつ出生情報がきちんと揃っている場合には <code>https://db.netkeiba.com/horse/YYYYXXXXXX</code> と表記される（<code>YYYY</code> は生年）．
一方で海外産馬などの都合で情報が不明瞭な場合は <code>https://db.netkeiba.com/horse/000a00033a</code> といった ID が振られている（ちなみにこの URL は<a href="https://db.netkeiba.com/horse/000a00033a" target="_blank" rel="noopener noreferrer">サンデーサイレンス</a>）．
<code>000a</code> はほぼ共通だが，それ以外についてはひと目見ただけではあまり共通項が見えてこない．</p>
<hr>
<p>各馬について，スクレイピングの対象となるのは以下の５つのページである：</p>
<ul>
<li><code>/</code>: プロフィール</li>
<li><code>/result</code>: 競走成績</li>
<li><code>/ped</code>: 血統</li>
<li><code>/sire</code> or <code>/mare</code>: 産駒の競走成績（繁殖入りした馬のみ）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="プロフィール">プロフィール<a href="https://ningensei848.github.io/2022/03/08/#%E3%83%97%E3%83%AD%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB" class="hash-link" aria-label="Direct link to プロフィール" title="Direct link to プロフィール">​</a></h3>
<p>各馬のトップページにアクセスするとまっ先に目に入るのがプロフィールである．
生まれに関する基礎情報や写真なんかもおいてあるし，他のページに詳しく掲載される情報も概要がまとめてある．</p>
<p>ここで収集すべきは，<code>div.horse_title</code>, <code>div.db_photo_box&gt;img</code>, <code>dl.tekisei&gt;dd&gt;table.tekisei_table</code>, <code>div.db_prof_table</code> の４箇所だ．
それぞれ，「名前」「写真」「適正評価」「プロフィール」が掲載されている．</p>
<p>また，「繁殖入りできたかどうか？」の判定のために〈産駒成績〉タブの有無も見つけられるようにしたい．
<code>ul.db_detail_menu</code> を探るといいだろう．</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="競走成績">競走成績<a href="https://ningensei848.github.io/2022/03/08/#%E7%AB%B6%E8%B5%B0%E6%88%90%E7%B8%BE" class="hash-link" aria-label="Direct link to 競走成績" title="Direct link to 競走成績">​</a></h3>
<p>競走成績一覧のページでは，その馬が一つでもレースに出ていれば，結果が表として出力される．
<code>table.db_h_race_results</code> を収集すればいいだろう．
未出走の場合や海外産馬の場合には表がないこともある．例外処理には気をつけたい．</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="血統">血統<a href="https://ningensei848.github.io/2022/03/08/#%E8%A1%80%E7%B5%B1" class="hash-link" aria-label="Direct link to 血統" title="Direct link to 血統">​</a></h3>
<p>こちらも同じく真ん中にデカデカと血統表が出力される．
<code>table.blood_table</code> を収集すればいいだろう．
名前等はこの時点では収集せず……と思ったが，後々必要になる気もしてきた．</p>
<p>また，兄弟等の近親についても情報があるが，敢えてこれを探りに行くのは骨が折れる．
ある程度データを集めてから，自前で謹慎を探せるようにするほうが良いと思われる．</p>
<p>表の組み方が特殊なことに留意．</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="産駒成績">産駒成績<a href="https://ningensei848.github.io/2022/03/08/#%E7%94%A3%E9%A7%92%E6%88%90%E7%B8%BE" class="hash-link" aria-label="Direct link to 産駒成績" title="Direct link to 産駒成績">​</a></h3>
<p>牡馬であれば <code>/sire</code>, 牝馬であれば <code>/mare</code> のページを持つ場合がある．
これは，繁殖入りできるほど血統的に期待される，或いは競走成績が良かった馬ということで，勝ち馬予想のためには必要不可欠な要素ではある．
が，あくまで統計的な情報でしかなく，最初から予想アルゴリズムに組み込むのは難しいかもしれない．</p>
<p>産駒成績のページの存在判定は各馬のトップページでもタブを見ればできるはずなので，一旦保留して関知しないこととする．</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="一旦まとめ">一旦まとめ<a href="https://ningensei848.github.io/2022/03/08/#%E4%B8%80%E6%97%A6%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="Direct link to 一旦まとめ" title="Direct link to 一旦まとめ">​</a></h2>
<p>netkeiba からスクレイピングしてくるための検討をした．</p>
<p>スクレイピング処理の部分と LOD 化する部分の話がまだ書けていないが，一旦 Puslish しておく．
（まぁどうなるかわからないが，前編ということとする）</p>
<p>Python によるスクレイピング処理とはすなわち， (1) <code>requests</code> （あるいは <code>aiohttp</code> ）でページコンテンツを取得し，(2) それを BeautifulSoup <sup><a href="https://ningensei848.github.io/2022/03/08/#user-content-fn-3-2ce0f1" id="user-content-fnref-3-2ce0f1" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup> にして (3) <code>pandas</code> でテーブルとか引っこ抜くことである．
この辺は以前に何度もやっているのでそのへんの資産を使い回せたら嬉しいな……</p>
<p>LOD 化するというのは，どうしようかまだ悩むところである．
オープンデータにすることを考えると，いちいち事前知識が必要になる TTL 形式のみで提供するのは避けたい．
となると JSON-LD か？となるがこれもこれでファイル容量の無駄遣いが大きい気がする……</p>
<p>TSV で提供 &amp; TTL への変換ツールも提供という形がもっともスマートな解だと信じたい．</p>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://ningensei848.github.io/2022/03/08/#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-2ce0f1">
<p>というかそんな時期の記事にまだアクセスできる ASCII の根性がスゲェ，尊敬に値する <a href="https://ningensei848.github.io/2022/03/08/#user-content-fnref-1-2ce0f1" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-2ce0f1">
<p><a href="https://www.jra.go.jp/kouza/yougo/c10020.html" target="_blank" rel="noopener noreferrer">レースの種類、条件など（競馬用語辞典）JRA</a> を参照のこと <a href="https://ningensei848.github.io/2022/03/08/#user-content-fnref-2-2ce0f1" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-3-2ce0f1">
<p>現時点 (2022/03/08) の<a href="https://pypi.org/project/beautifulsoup4/4.10.0/" target="_blank" rel="noopener noreferrer">最新版は Python 3.8 前提の 4.10.0</a> である（なお日本語訳は 4.2.0 までしかない模様） <a href="https://ningensei848.github.io/2022/03/08/#user-content-fnref-3-2ce0f1" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <author>
            <name>Kiai</name>
            <email>k.kubokawa@klis.tsukuba.ac.jp</email>
            <uri>https://twitter.com/Ningensei848</uri>
        </author>
        <category label="python" term="python"/>
        <category label="スクレイピング" term="スクレイピング"/>
        <category label="競馬" term="競馬"/>
    </entry>
</feed>