{"pageProps":{"slug":["diary","2022","01","18"],"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      code: \"code\",\n      strong: \"strong\",\n      blockquote: \"blockquote\",\n      ul: \"ul\",\n      li: \"li\",\n      em: \"em\"\n    }, props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"Next.js + MDX v2\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://nextjs.org/blog/markdown\",\n          children: \"Blog - Markdown/MDX with Next.js | Next.js\"\n        }), \" では，\", _jsx(_components.a, {\n          href: \"https://nextjs.org/\",\n          children: \"Next.js\"\n        }), \" の公式文書として Markdown / MDX でブログを作成する方法を紹介している．\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Markdown は前提知識として詳細は省くが，\", _jsx(_components.a, {\n          href: \"https://mdxjs.com/\",\n          children: \"MDX\"\n        }), \" とは Markdown 内で JSX を使えるように記法を拡張したものである．すなわち，Markdown を書く手軽さでその中に JS コードを含めることができるということだ．これは技術文書を書く人々にとってはかなり有り難いアプローチとなりうる…………その設定までが地獄の道のりなのだが．\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"２つのアプローチ\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"MDX を書くために，今の所大きく２つのアプローチがある．これは，サーバ / クライアントのどちらで MDX を \\\"解釈\\\" するかという観点によって分けられている．\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"MDX を JSX の拡張記法と捉えたときに，サーバ側で解釈させたいという人が多いだろう．実際，MDX をパースする等の処理ではサーバ側での力を借りて行う実装がほとんどだ（というかすべてクライアント側で完結しているのはみたことがない）．\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"一方で，Markdown 内部のごく一部に JS コードを挿入したいという欲求もある（筆者もこれだった，技術文書内でチョロっと含めたい場面はこれまでも多々あったためである）．Markdown の拡張記法としての MDX という観点では，クライアント側で MDX を処理したくなる．すなわち，いちいち \", _jsx(_components.code, {\n          children: \".mdx\"\n        }), \" 等としてファイルに保存しローダーに読み込ませるのではなく，DB 内に「 MDX 記法」として文字列を保存し，それを読み出して来て処理するのである．これを実現せんとしていたのが（上述のブログにも紹介されていた） \", _jsx(_components.a, {\n          href: \"https://github.com/hashicorp/next-mdx-remote\",\n          children: \"next-mdx-remote\"\n        }), \" である．\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"MDX v2 時代の到来\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"多くの Next.js + MDX ブログは next-mdx-remote を採用しているだろう．が，最近（２０２１年後半）になって \", _jsx(_components.code, {\n          children: \"mdx-js\"\n        }), \" の \", _jsx(_components.strong, {\n          children: \"v2\"\n        }), \" が登場した．幾年ものハードワークを重ねて，かなり多くの改善があったらしい．\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://mdxjs.com/blog/v2/\",\n          children: \"https://mdxjs.com/blog/v2/\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"つらつらとドキュメントを眺めてみると，Next.js のクライアント側で処理する例を見つけてしまった．しかも，上述の \", _jsx(_components.code, {\n          children: \"next-mdx-remote\"\n        }), \" よりも高機能らしい，イイね．\"]\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"\\\"This is similar to what \", _jsx(_components.code, {\n            children: \"mdx-bundler\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"next-mdx-remote\"\n          }), \" also do, but they add more features.\\\"\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://mdxjs.com/guides/mdx-on-demand/#nextjs-example\",\n          children: \"https://mdxjs.com/guides/mdx-on-demand/#nextjs-example\"\n        })\n      }), \"\\n\", _jsxs(\"div\", {\n        class: \"msg\",\n        children: [_jsx(_components.p, {\n          children: \"ちょっと気になったのは以下の記述である．そりゃあ考えれば分かる通り致し方ないが，でもうまく痒いところに手が届くようになってほしいという期待もある\"\n        }), _jsxs(_components.blockquote, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"MDX is not a bundler (esbuild, webpack, and Rollup are bundlers): you can’t import other code from the server within the string of MDX and get a nicely minified bundle out or so.\"\n          }), \"\\n\"]\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"課題：\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"emoji\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"絵文字を使おうとしたら「 \", _jsx(_components.em, {\n          children: \"Expecting Unicode escape sequence \\\\uXXXX\"\n        }), \" 」って怒られた．すなわち分かるようにエスケープせよってことなんだろうけど，いまいちつかめなかった（ Unicode まわりは調べると沼っぽい）\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"css\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"いまは CSS に \", _jsx(_components.code, {\n          children: \"zenn-content-css\"\n        }), \" をそのまま流用している．\", _jsx(_components.code, {\n          children: \"<div class=\\\"msg\\\">\"\n        }), \" でうまく黄色く表示されてくれたのは僥倖だったが，これを zenn 記法すなわち \", _jsx(_components.code, {\n          children: \":::message\"\n        }), \" で記述できるようにしたい．となると，remark plugin に手を出さねばならないので，いまは未だ無理かもしれない．とりあえず今日はここまで．\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","meta":{"id":"2022-01-18","title":"MDX をやっていく","emoji":"🙉","type":"diary","topics":["mdx"],"published":true}},"__N_SSG":true}