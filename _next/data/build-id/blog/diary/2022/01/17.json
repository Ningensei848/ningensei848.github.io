{"pageProps":{"slug":["diary","2022","01","17"],"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      a: \"a\",\n      blockquote: \"blockquote\",\n      pre: \"pre\",\n      code: \"code\",\n      hr: \"hr\",\n      em: \"em\",\n      strong: \"strong\"\n    }, props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"next/dynamic で named import したときにエラー\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://nextjs.org/docs/advanced-features/dynamic-import#with-named-exports\",\n          children: \"ドキュメント\"\n        }), \"通りに実装しているのに， TypeScript くんはなぜか許してくれない．\"]\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-js\",\n            children: \"import dynamic from 'next/dynamic'\\n\\nconst DynamicComponent = dynamic(() => import('../components/hello').then((mod) => mod.Hello)) // ここで下記のエラーが起こる\\nfunction Home() {\\n  return (\\n    <div>\\n      <Header />\\n      <DynamicComponent />\\n      <p>HOME PAGE is here!</p>\\n    </div>\\n  )\\n}\\n\\nexport default Home\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-schell\",\n          children: \"Argument of type '() => Promise<ComponentClass<never, any> | FunctionComponent<never> | { default: ComponentType<never>; } | ((props: PageProps) => JSX.Element)>' is not assignable to parameter of type 'DynamicOptions<{}> | (() => LoaderComponent<{}>) | LoaderComponent<{}>'.\\nType '() => Promise<ComponentClass<never, any> | FunctionComponent<never> | { default: ComponentType<never>; } | ((props: PageProps) => JSX.Element)>' is not assignable to type '() => LoaderComponent<{}>'.\\nType 'Promise<ComponentClass<never, any> | FunctionComponent<never> | { default: ComponentType<never>; } | ((props: PageProps) => Element)>' is not assignable to type 'LoaderComponent<{}>'.\\nType 'ComponentClass<never, any> | FunctionComponent<never> | { default: ComponentType<never>; } | ((props: PageProps) => Element)' is not assignable to type 'ComponentClass<{}, any> | FunctionComponent<{}> | { default: ComponentType<{}>; }'.\\nType 'ComponentClass<never, any>' is not assignable to type 'ComponentClass<{}, any> | FunctionComponent<{}> | { default: ComponentType<{}>; }'.\\nType 'ComponentClass<never, any>' is not assignable to type 'ComponentClass<{}, any>'.\\nTypes of property 'getDerivedStateFromProps' are incompatible.\\nType 'GetDerivedStateFromProps<never, any> | undefined' is not assignable to type 'GetDerivedStateFromProps<{}, any> | undefined'.\\nType 'GetDerivedStateFromProps<never, any>' is not assignable to type 'GetDerivedStateFromProps<{}, any>'.\\nTypes of parameters 'nextProps' and 'nextProps' are incompatible.\\nType 'Readonly<{}>' is not assignable to type 'never'.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"精読すればよくわかるのかもしれないが，とても読んでいられない分量だったので読みません（残当）\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"まぁ \", _jsx(_components.code, {\n          children: \"dynamic\"\n        }), \" とかいうイレギュラーなことをしているので致し方ないといえばそれまでなのですが……\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"で，この呼び出し方は暗黙的（？）に Promise を返すことになっていて，そのへんで型の問題が起きているような気がします\"\n      }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h1, {\n        children: [\"解決： \", _jsx(_components.code, {\n          children: \"dynamic\"\n        }), \" に型を付けろ\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.em, {\n          children: \"next js dynamic import typescript\"\n        }), \" あたりでググったら出てきました．\", _jsx(_components.code, {\n          children: \"dynamic<HelloProps>(import('../components/hello').then((mod) => mod.Hello))\"\n        }), \" みたいに，\", _jsxs(_components.strong, {\n          children: [_jsx(_components.em, {\n            children: \"named import\"\n          }), \" しようとしているコンポネントの props の型を渡してやればいい\"]\n        }), \"ようです．\"]\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-js\",\n            children: \"// parent\\nimport dynamic from 'next/dynamic'\\nimport { MyComponentProps } from './interface'\\n\\nconst MyComponent = dynamic<MyComponentProps>(() => import('./MyComponent').then((module) => module.MyComponent))\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"cf.\\n\", _jsx(_components.a, {\n          href: \"https://github.com/vercel/next.js/issues/22278#issuecomment-781194360\",\n          children: \"https://github.com/vercel/next.js/issues/22278#issuecomment-781194360\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"え～～ Props とか渡してないプレーンな JSX.Element なんですけど～～という場合は，型として \", _jsx(_components.code, {\n          children: \"{}\"\n        }), \" を渡せばとりあえず通るようです（ eslint に怒られる場合は \", _jsx(_components.code, {\n          children: \" @typescript-eslint/ban-types\"\n        }), \" で黙らせましょう）．\"]\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-js\",\n            children: \"import dynamic from 'next/dynamic'\\nconst MyComponent = dynamic<{}>(() => import('./MyComponent').then((module) => module.MyComponent))\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"公式ドキュメントには書いてあるのに TypeScript だと事情が違うみたいなの時々遭遇してもにょりまるわね～～でも先人たちの言葉をどうにか弄って生き残りたい所存です．\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","meta":{"id":"2022-01-17","title":"Next.js との向き合い（2022/01/17）","emoji":"🙈","type":"diary","topics":["nextjs"],"published":true}},"__N_SSG":true}